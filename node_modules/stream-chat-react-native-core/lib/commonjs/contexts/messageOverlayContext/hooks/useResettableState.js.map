{"version":3,"names":["_react","require","_useIsMountedRef","useResettableState","values","_useState","useState","_useState2","_slicedToArray2","data","setData","isMounted","useIsMountedRef","reset","current","exports"],"sources":["useResettableState.ts"],"sourcesContent":["import { useState } from 'react';\n\nimport { useIsMountedRef } from '../../../hooks/useIsMountedRef';\n\n/**\n * Wrapper around useState that provides a `reset`\n * function to reset the state to its initial value.\n *\n * Will not set state after being unmounted.\n * */\nexport const useResettableState = <T>(values: T) => {\n  const [data, setData] = useState(values);\n  const isMounted = useIsMountedRef();\n\n  const reset = () => {\n    if (isMounted.current) {\n      setData(values);\n    }\n  };\n\n  return { data, reset, setData };\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,gBAAA,GAAAD,OAAA;AAQO,IAAME,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAOC,MAAS,EAAK;EAClD,IAAAC,SAAA,GAAwB,IAAAC,eAAQ,EAACF,MAAM,CAAC;IAAAG,UAAA,OAAAC,eAAA,aAAAH,SAAA;IAAjCI,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAMI,SAAS,GAAG,IAAAC,gCAAe,EAAC,CAAC;EAEnC,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;IAClB,IAAIF,SAAS,CAACG,OAAO,EAAE;MACrBJ,OAAO,CAACN,MAAM,CAAC;IACjB;EACF,CAAC;EAED,OAAO;IAAEK,IAAI,EAAJA,IAAI;IAAEI,KAAK,EAALA,KAAK;IAAEH,OAAO,EAAPA;EAAQ,CAAC;AACjC,CAAC;AAACK,OAAA,CAAAZ,kBAAA,GAAAA,kBAAA"}
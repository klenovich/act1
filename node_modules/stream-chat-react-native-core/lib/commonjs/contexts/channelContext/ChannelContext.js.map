{"version":3,"names":["_react","_interopRequireWildcard","require","_defaultBaseContextValue","_getDisplayName","_isTestEnvironment","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ChannelContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","exports","ChannelProvider","_ref","children","value","createElement","Provider","__self","__source","fileName","lineNumber","columnNumber","useChannelContext","contextValue","useContext","isTestEnvironment","Error","withChannelContext","Component","WithChannelContextComponent","props","channelContext","_extends2","displayName","getDisplayName"],"sources":["ChannelContext.tsx"],"sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { Channel, ChannelState } from 'stream-chat';\n\nimport type { EmptyStateProps } from '../../components/Indicators/EmptyStateIndicator';\nimport type { LoadingProps } from '../../components/Indicators/LoadingIndicator';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type ChannelContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /**\n   * Instance of channel object from stream-chat package.\n   *\n   * Please check the docs around how to create or query channel - https://getstream.io/chat/docs/javascript/creating_channels/?language=javascript\n   *\n   * ```\n   * import { StreamChat, Channel } from 'stream-chat';\n   * import { Chat, Channel} from 'stream-chat-react-native';\n   *\n   * const client = StreamChat.getInstance('api_key');\n   * await client.connectUser('user_id', 'user_token');\n   * const channel = client.channel('messaging', 'channel_id');\n   * await channel.watch();\n   *\n   * <Chat client={client}>\n   *  <Channel channel={channel}>\n   *  </Channel>\n   * </Chat>\n   * ```\n   *\n   * @overrideType Channel\n   */\n  channel: Channel<StreamChatGenerics>;\n  /**\n   * Custom UI component to display empty state when channel has no messages.\n   *\n   * **Default** [EmptyStateIndicator](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Indicators/EmptyStateIndicator.tsx)\n   */\n  EmptyStateIndicator: React.ComponentType<EmptyStateProps>;\n  /**\n   * When set to true, reactions will be limited to 1 per user. If user selects another reaction\n   * then his previous reaction will be removed and replaced with new one.\n   *\n   * This is similar to reaction UX on [iMessage application](https://en.wikipedia.org/wiki/IMessage).\n   */\n  enforceUniqueReaction: boolean;\n  error: boolean | Error;\n  /**\n   * When set to false, it will disable giphy command on MessageInput component.\n   */\n  giphyEnabled: boolean;\n  /**\n   * Hide inline date separators on channel\n   */\n  hideDateSeparators: boolean;\n  hideStickyDateHeader: boolean;\n  /**\n   * Returns true if the current user has admin privileges\n   */\n  isAdmin: boolean;\n  /**\n   * Returns true if the current user is a moderator\n   */\n  isModerator: boolean;\n  /**\n   * Returns true if the current user is a owner\n   */\n  isOwner: boolean;\n  /**\n   * Loads channel around a specific message\n   *\n   * @param messageId If undefined, channel will be loaded at most recent message.\n   */\n  loadChannelAroundMessage: ({ messageId }: { messageId?: string }) => Promise<void>;\n  /**\n   * @deprecated use loadChannelAroundMessage instead\n   *\n   * Loads channel at specific message\n   *\n   * @param messageId If undefined, channel will be loaded at most recent message.\n   * @param before Number of message to query before messageId\n   * @param after Number of message to query after messageId\n   */\n  loadChannelAtMessage: ({\n    after,\n    before,\n    messageId,\n  }: {\n    after?: number;\n    before?: number;\n    messageId?: string;\n  }) => Promise<void>;\n  loading: boolean;\n  /**\n   * Custom loading indicator to override the Stream default\n   */\n  LoadingIndicator: React.ComponentType<LoadingProps>;\n  markRead: () => void;\n  /**\n   *\n   * ```json\n   * {\n   *   \"thierry-123\": {\n   *     \"id\": \"thierry-123\",\n   *     \"role\": \"user\",\n   *     \"created_at\": \"2019-04-03T14:42:47.087869Z\",\n   *     \"updated_at\": \"2019-04-16T09:20:03.982283Z\",\n   *     \"last_active\": \"2019-04-16T11:23:51.168113408+02:00\",\n   *     \"online\": true\n   *   },\n   *   \"vishal-123\": {\n   *     \"id\": \"vishal-123\",\n   *     \"role\": \"user\",\n   *     \"created_at\": \"2019-05-03T14:42:47.087869Z\",\n   *     \"updated_at\": \"2019-05-16T09:20:03.982283Z\",\n   *     \"last_active\": \"2019-06-16T11:23:51.168113408+02:00\",\n   *     \"online\": false\n   *   }\n   * }\n   * ```\n   */\n  members: ChannelState<StreamChatGenerics>['members'];\n  /**\n   * Custom network down indicator to override the Stream default\n   */\n  NetworkDownIndicator: React.ComponentType;\n  read: ChannelState<StreamChatGenerics>['read'];\n  reloadChannel: () => Promise<void>;\n  /**\n   * When true, messagelist will be scrolled to first unread message, when opened.\n   */\n  scrollToFirstUnreadThreshold: number;\n  setLastRead: React.Dispatch<React.SetStateAction<Date | undefined>>;\n  setTargetedMessage: (messageId: string) => void;\n  /**\n   *\n   * ```json\n   * {\n   *   \"thierry-123\": {\n   *     \"id\": \"thierry-123\",\n   *     \"role\": \"user\",\n   *     \"created_at\": \"2019-04-03T14:42:47.087869Z\",\n   *     \"updated_at\": \"2019-04-16T09:20:03.982283Z\",\n   *     \"last_active\": \"2019-04-16T11:23:51.168113408+02:00\",\n   *     \"online\": true\n   *   },\n   *   \"vishal-123\": {\n   *     \"id\": \"vishal-123\",\n   *     \"role\": \"user\",\n   *     \"created_at\": \"2019-05-03T14:42:47.087869Z\",\n   *     \"updated_at\": \"2019-05-16T09:20:03.982283Z\",\n   *     \"last_active\": \"2019-06-16T11:23:51.168113408+02:00\",\n   *     \"online\": false\n   *   }\n   * }\n   * ```\n   */\n  watchers: ChannelState<StreamChatGenerics>['watchers'];\n  disabled?: boolean;\n  enableMessageGroupingByUser?: boolean;\n  isChannelActive?: boolean;\n  lastRead?: Date;\n  /**\n   * Maximum time in milliseconds that should occur between messages\n   * to still consider them grouped together\n   */\n  maxTimeBetweenGroupedMessages?: number;\n  /**\n   * Custom UI component for sticky header of channel.\n   *\n   * **Default** [DateHeader](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageList/DateHeader.tsx)\n   */\n  StickyHeader?: React.ComponentType<{ dateString: string }>;\n  /**\n   * Id of message, around which Channel/MessageList gets loaded when opened.\n   * You will see a highlighted background for targetted message, when opened.\n   */\n  targetedMessage?: string;\n  threadList?: boolean;\n  watcherCount?: ChannelState<StreamChatGenerics>['watcher_count'];\n};\n\nexport const ChannelContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as ChannelContextValue,\n);\n\nexport const ChannelProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value: ChannelContextValue<StreamChatGenerics>;\n}>) => (\n  <ChannelContext.Provider value={value as unknown as ChannelContextValue}>\n    {children}\n  </ChannelContext.Provider>\n);\n\nexport const useChannelContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    ChannelContext,\n  ) as unknown as ChannelContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useChannelContext hook was called outside of the ChannelContext provider. Make sure you have configured Channel component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#channel`,\n    );\n  }\n\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChannelContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof ChannelContextValue<StreamChatGenerics>>> => {\n  const WithChannelContextComponent = (\n    props: Omit<P, keyof ChannelContextValue<StreamChatGenerics>>,\n  ) => {\n    const channelContext = useChannelContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...channelContext} />;\n  };\n  WithChannelContextComponent.displayName = `WithChannelContext${getDisplayName(Component)}`;\n  return WithChannelContextComponent;\n};\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AAOA,IAAAC,wBAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AAA+D,IAAAI,KAAA;EAAAC,YAAA;AAAA,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAR,wBAAAY,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,aAAAE,OAAA,CAAAF,GAAA,yBAAAA,GAAA,uCAAAA,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,cAAAN,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAiLxD,IAAMW,cAAc,GAAGC,iBAAK,CAACC,aAAa,CAC/CC,mDACF,CAAC;AAACC,OAAA,CAAAJ,cAAA,GAAAA,cAAA;AAEK,IAAMK,eAAe,GAAG,SAAlBA,eAAeA,CAAAC,IAAA;EAAA,IAG1BC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,KAAK,GAAAF,IAAA,CAALE,KAAK;EAAA,OAILtC,MAAA,YAAAuC,aAAA,CAACT,cAAc,CAACU,QAAQ;IAACF,KAAK,EAAEA,KAAwC;IAAAG,MAAA,EAAAnC,KAAA;IAAAoC,QAAA;MAAAC,QAAA,EAAApC,YAAA;MAAAqC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrER,QACsB,CAAC;AAAA,CAC3B;AAACH,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAEK,IAAMW,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA,EAEvB;EACL,IAAMC,YAAY,GAAG,IAAAC,iBAAU,EAC7BlB,cACF,CAAuD;EAEvD,IAAIiB,YAAY,KAAKd,mDAA0B,IAAI,CAAC,IAAAgB,oCAAiB,EAAC,CAAC,EAAE;IACvE,MAAM,IAAIC,KAAK,6NAEf,CAAC;EACH;EAEA,OAAOH,YAAY;AACrB,CAAC;AAACb,OAAA,CAAAY,iBAAA,GAAAA,iBAAA;AAMK,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkBA,CAI7BC,SAAiC,EACoC;EACrE,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA2BA,CAC/BC,KAA6D,EAC1D;IACH,IAAMC,cAAc,GAAGT,iBAAiB,CAAqB,CAAC;IAE9D,OAAO9C,MAAA,YAAAuC,aAAA,CAACa,SAAS,MAAAI,SAAA,iBAAMF,KAAK,EAAYC,cAAc;MAAAd,MAAA,EAAAnC,KAAA;MAAAoC,QAAA;QAAAC,QAAA,EAAApC,YAAA;QAAAqC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAG,CAAC;EAC5D,CAAC;EACDQ,2BAA2B,CAACI,WAAW,0BAAwB,IAAAC,8BAAc,EAACN,SAAS,CAAG;EAC1F,OAAOC,2BAA2B;AACpC,CAAC;AAACnB,OAAA,CAAAiB,kBAAA,GAAAA,kBAAA"}
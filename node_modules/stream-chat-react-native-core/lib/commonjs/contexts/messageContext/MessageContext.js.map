{"version":3,"names":["_react","_interopRequireWildcard","require","_defaultBaseContextValue","_getDisplayName","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","MessageContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","exports","MessageProvider","_ref","children","value","createElement","Provider","__self","__source","fileName","lineNumber","columnNumber","useMessageContext","contextValue","useContext","withMessageContext","Component","WithMessageContextComponent","props","messageContext","_extends2","displayName","getDisplayName"],"sources":["MessageContext.tsx"],"sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { Attachment } from 'stream-chat';\n\nimport type { ActionHandler } from '../../components/Attachment/Attachment';\nimport type {\n  MessageTouchableHandlerPayload,\n  TouchableHandlerPayload,\n} from '../../components/Message/Message';\nimport type { GroupType, MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { ChannelContextValue } from '../../contexts/channelContext/ChannelContext';\nimport type { MessageContentType } from '../../contexts/messagesContext/MessagesContext';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\n\nexport type Alignment = 'right' | 'left';\n\nexport type Reactions = {\n  own: boolean;\n  type: string;\n}[];\n\nexport type MessageContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /** Whether or not actions can be performed on message */\n  actionsEnabled: boolean;\n  /** Position of the message, either 'right' or 'left' */\n  alignment: Alignment;\n  /** The files attached to a message */\n  files: Attachment<StreamChatGenerics>[];\n  /**\n   * Position of message in group - top, bottom, middle, single.\n   *\n   * Message group is a group of consecutive messages from same user. groupStyles can be used to style message as per their position in message group\n   * e.g., user avatar (to which message belongs to) is only showed for last (bottom) message in group.\n   */\n  groupStyles: GroupType[];\n  /** Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands). */\n  handleAction: ActionHandler;\n  handleDeleteMessage: () => Promise<void>;\n  handleEditMessage: () => void;\n  handleQuotedReplyMessage: () => void;\n  handleResendMessage: () => Promise<void>;\n  handleToggleBanUser: () => Promise<void>;\n  handleToggleMuteUser: () => Promise<void>;\n  handleToggleReaction: (reactionType: string) => Promise<void>;\n  /** Whether or not message has reactions */\n  hasReactions: boolean;\n  /** The images attached to a message */\n  images: Attachment<StreamChatGenerics>[];\n  /** Whether or not this is the active user's message */\n  isMyMessage: boolean;\n  /** Whether or not this is the last message in a group of messages */\n  lastGroupMessage: boolean;\n  /** Current [message object](https://getstream.io/chat/docs/#message_format) */\n  message: MessageType<StreamChatGenerics>;\n  /** Order to render the message content */\n  messageContentOrder: MessageContentType[];\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/Message.tsx)\n   *\n   * By default, we show the overlay with all the message actions on long press.\n   *\n   * @param payload   Payload object for onLongPress event\n   */\n  onLongPress: (payload: TouchableHandlerPayload) => void;\n  /** Whether the message is only text and the text is only emojis */\n  onlyEmojis: boolean;\n  /** Handler to open a thread on a message */\n  onOpenThread: () => void;\n  /**\n   * You can call methods available on the Message\n   * component such as handleEdit, handleDelete, handleAction etc.\n   *\n   * Source - [Message](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/Message/Message.tsx)\n   *\n   * By default, we will dismiss the keyboard on press.\n   *\n   * @param payload   Payload object for onPress event\n   */\n  onPress: (payload: MessageTouchableHandlerPayload) => void;\n  onPressIn: ((payload: TouchableHandlerPayload) => void) | null;\n  /** The images attached to a message */\n  otherAttachments: Attachment<StreamChatGenerics>[];\n  reactions: Reactions;\n  showMessageOverlay: (messageReactions?: boolean) => void;\n  showMessageStatus: boolean;\n  /** Whether or not the Message is part of a Thread */\n  threadList: boolean;\n  /** The videos attached to a message */\n  videos: Attachment<StreamChatGenerics>[];\n  goToMessage?: (messageId: string) => void;\n  /** Latest message id on current channel */\n  lastReceivedId?: string;\n  /** Prevent message being pressed for image viewer view */\n  preventPress?: boolean;\n  /** Whether or not the avatar show show next to Message */\n  showAvatar?: boolean;\n} & Pick<ChannelContextValue<StreamChatGenerics>, 'channel' | 'disabled' | 'members'>;\n\nexport const MessageContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as MessageContextValue,\n);\n\nexport const MessageProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessageContextValue<StreamChatGenerics>;\n}>) => (\n  <MessageContext.Provider value={value as unknown as MessageContextValue}>\n    {children}\n  </MessageContext.Provider>\n);\n\nexport const useMessageContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    MessageContext,\n  ) as unknown as MessageContextValue<StreamChatGenerics>;\n\n  return contextValue;\n};\n\n/**\n * Typescript currently does not support partial inference so if MessageContext\n * typing is desired while using the HOC withMessageContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageContextValue<StreamChatGenerics>>> => {\n  const WithMessageContextComponent = (\n    props: Omit<P, keyof MessageContextValue<StreamChatGenerics>>,\n  ) => {\n    const messageContext = useMessageContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...messageContext} />;\n  };\n  WithMessageContextComponent.displayName = `WithMessageContext${getDisplayName(Component)}`;\n  return WithMessageContextComponent;\n};\n"],"mappings":"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"}
{"version":3,"names":["_react","require","_ChannelsStateContext","useStateManager","_ref","initialValue","_state$cid","cid","key","setState","state","memoizedInitialValue","useMemo","value","setValue","useCallback","useChannelState","channel","threadId","_channel$state","_channel$state2","_channel$state3","_channel$state4","_channel$state4$threa","id","_useChannelsStateCont","useChannelsStateContext","decreaseSubscriberCount","increaseSubscriberCount","useEffect","_useStateManager","members","_useStateManager2","_slicedToArray2","setMembers","_useStateManager3","messages","_useStateManager4","setMessages","_useStateManager5","read","_useStateManager6","setRead","_useStateManager7","_useStateManager8","typing","setTyping","_useStateManager9","_useStateManager10","watcherCount","setWatcherCount","_useStateManager11","_useStateManager12","watchers","setWatchers","_useStateManager13","threads","_useStateManager14","threadMessages","setThreadMessages"],"sources":["useChannelState.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo } from 'react';\n\nimport type { Channel as ChannelType } from 'stream-chat';\n\nimport { useChannelsStateContext } from './ChannelsStateContext';\n\nimport type { ChannelsStateContextValue, ChannelState, Keys } from './ChannelsStateContext';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\ntype StateManagerParams<\n  Key extends Keys,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Omit<\n  ChannelsStateContextValue<StreamChatGenerics>,\n  'increaseSubscriberCount' | 'decreaseSubscriberCount'\n> & {\n  cid: string;\n  key: Key;\n};\n\n/* \n  This hook takes care of creating a useState-like interface which can be used later to call\n  updates to the ChannelsStateContext reducer. It receives the cid and key which it wants to update\n  and perform the state updates. Also supports a initialState.\n*/\nfunction useStateManager<\n  Key extends Keys,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  {\n    cid,\n    key,\n    setState,\n    state,\n  }: Omit<\n    StateManagerParams<Key, StreamChatGenerics>,\n    'increaseSubscriberCount' | 'decreaseSubscriberCount'\n  >,\n  initialValue?: ChannelState<StreamChatGenerics>[Key],\n) {\n  const memoizedInitialValue = useMemo(() => initialValue, []);\n  const value =\n    state[cid]?.[key] || (memoizedInitialValue as ChannelState<StreamChatGenerics>[Key]);\n\n  const setValue = useCallback(\n    (value: ChannelState<StreamChatGenerics>[Key]) => setState({ cid, key, value }),\n    [cid, key],\n  );\n\n  return [value, setValue] as const;\n}\n\nexport type UseChannelStateValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  members: ChannelState<StreamChatGenerics>['members'];\n  messages: ChannelState<StreamChatGenerics>['messages'];\n  read: ChannelState<StreamChatGenerics>['read'];\n  setMembers: (value: ChannelState<StreamChatGenerics>['members']) => void;\n  setMessages: (value: ChannelState<StreamChatGenerics>['messages']) => void;\n  setRead: (value: ChannelState<StreamChatGenerics>['read']) => void;\n  setThreadMessages: (value: ChannelState<StreamChatGenerics>['threadMessages']) => void;\n  setTyping: (value: ChannelState<StreamChatGenerics>['typing']) => void;\n  setWatcherCount: (value: ChannelState<StreamChatGenerics>['watcherCount']) => void;\n  setWatchers: (value: ChannelState<StreamChatGenerics>['watchers']) => void;\n  threadMessages: ChannelState<StreamChatGenerics>['threadMessages'];\n  typing: ChannelState<StreamChatGenerics>['typing'];\n  watcherCount: ChannelState<StreamChatGenerics>['watcherCount'];\n  watchers: ChannelState<StreamChatGenerics>['watchers'];\n};\n\nexport function useChannelState<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  channel: ChannelType<StreamChatGenerics> | undefined,\n  threadId?: string,\n): UseChannelStateValue<StreamChatGenerics> {\n  const cid = channel?.id || 'id'; // in case channel is not initialized, use generic id string for indexing\n  const { decreaseSubscriberCount, increaseSubscriberCount, setState, state } =\n    useChannelsStateContext<StreamChatGenerics>();\n\n  // Keeps track of how many Channel components are subscribed to this Channel state (Channel vs Thread concurrency)\n  useEffect(() => {\n    increaseSubscriberCount({ cid });\n    return () => {\n      decreaseSubscriberCount({ cid });\n    };\n  }, []);\n\n  const [members, setMembers] = useStateManager(\n    {\n      cid,\n      key: 'members',\n      setState,\n      state,\n    },\n    channel?.state?.members || {},\n  );\n\n  const [messages, setMessages] = useStateManager(\n    {\n      cid,\n      key: 'messages',\n      setState,\n      state,\n    },\n    channel?.state?.messages || [],\n  );\n\n  const [read, setRead] = useStateManager(\n    {\n      cid,\n      key: 'read',\n      setState,\n      state,\n    },\n    channel?.state?.read || {},\n  );\n\n  const [typing, setTyping] = useStateManager(\n    {\n      cid,\n      key: 'typing',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [watcherCount, setWatcherCount] = useStateManager({\n    cid,\n    key: 'watcherCount',\n    setState,\n    state,\n  });\n\n  const [watchers, setWatchers] = useStateManager(\n    {\n      cid,\n      key: 'watchers',\n      setState,\n      state,\n    },\n    {},\n  );\n\n  const [threadMessages, setThreadMessages] = useStateManager(\n    {\n      cid,\n      key: 'threadMessages',\n      setState,\n      state,\n    },\n    (threadId && channel?.state?.threads?.[threadId]) || [],\n  );\n\n  return {\n    members,\n    messages,\n    read,\n    setMembers,\n    setMessages,\n    setRead,\n    setThreadMessages,\n    setTyping,\n    setWatcherCount,\n    setWatchers,\n    threadMessages,\n    typing,\n    watcherCount,\n    watchers,\n  };\n}\n"],"mappings":"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"}
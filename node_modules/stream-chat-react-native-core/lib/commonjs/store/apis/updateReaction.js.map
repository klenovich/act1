{"version":3,"names":["_mapMessageToStorable2","require","_mapReactionToStorable","_mapUserToStorable","_QuickSqliteClient","_createUpdateQuery","_createUpsertQuery","updateReaction","_ref","_ref$flush","flush","message","reaction","queries","user","push","createUpsertQuery","mapUserToStorable","createUpdateQuery","mapReactionToStorable","messageId","message_id","userId","user_id","reaction_counts","_mapMessageToStorable","mapMessageToStorable","reactionCounts","id","QuickSqliteClient","executeSqlBatch","exports"],"sources":["updateReaction.ts"],"sourcesContent":["import type { FormatMessageResponse, MessageResponse, ReactionResponse } from 'stream-chat';\n\nimport { mapMessageToStorable } from '../mappers/mapMessageToStorable';\nimport { mapReactionToStorable } from '../mappers/mapReactionToStorable';\nimport { mapUserToStorable } from '../mappers/mapUserToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpdateQuery } from '../sqlite-utils/createUpdateQuery';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const updateReaction = ({\n  flush = true,\n  message,\n  reaction,\n}: {\n  message: MessageResponse | FormatMessageResponse;\n  reaction: ReactionResponse;\n  flush?: boolean;\n}) => {\n  const queries: PreparedQueries[] = [];\n\n  if (reaction.user) {\n    queries.push(createUpsertQuery('users', mapUserToStorable(reaction.user)));\n  }\n\n  queries.push(\n    createUpdateQuery('reactions', mapReactionToStorable(reaction), {\n      messageId: reaction.message_id,\n      userId: reaction.user_id,\n    }),\n  );\n\n  if (message.reaction_counts) {\n    const { reactionCounts } = mapMessageToStorable(message);\n\n    queries.push(\n      createUpdateQuery(\n        'messages',\n        {\n          reactionCounts,\n        },\n        {\n          id: message.id,\n        },\n      ),\n    );\n  }\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(queries);\n  }\n\n  return queries;\n};\n"],"mappings":";;;;AAEA,IAAAA,sBAAA,GAAAC,OAAA;AACA,IAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AACA,IAAAK,kBAAA,GAAAL,OAAA;AAGO,IAAMM,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAQrB;EAAA,IAAAC,UAAA,GAAAD,IAAA,CAPJE,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;IACZE,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;EAMR,IAAMC,OAA0B,GAAG,EAAE;EAErC,IAAID,QAAQ,CAACE,IAAI,EAAE;IACjBD,OAAO,CAACE,IAAI,CAAC,IAAAC,oCAAiB,EAAC,OAAO,EAAE,IAAAC,oCAAiB,EAACL,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;EAC5E;EAEAD,OAAO,CAACE,IAAI,CACV,IAAAG,oCAAiB,EAAC,WAAW,EAAE,IAAAC,4CAAqB,EAACP,QAAQ,CAAC,EAAE;IAC9DQ,SAAS,EAAER,QAAQ,CAACS,UAAU;IAC9BC,MAAM,EAAEV,QAAQ,CAACW;EACnB,CAAC,CACH,CAAC;EAED,IAAIZ,OAAO,CAACa,eAAe,EAAE;IAC3B,IAAAC,qBAAA,GAA2B,IAAAC,2CAAoB,EAACf,OAAO,CAAC;MAAhDgB,cAAc,GAAAF,qBAAA,CAAdE,cAAc;IAEtBd,OAAO,CAACE,IAAI,CACV,IAAAG,oCAAiB,EACf,UAAU,EACV;MACES,cAAc,EAAdA;IACF,CAAC,EACD;MACEC,EAAE,EAAEjB,OAAO,CAACiB;IACd,CACF,CACF,CAAC;EACH;EAEA,IAAIlB,KAAK,EAAE;IACTmB,oCAAiB,CAACC,eAAe,CAACjB,OAAO,CAAC;EAC5C;EAEA,OAAOA,OAAO;AAChB,CAAC;AAACkB,OAAA,CAAAxB,cAAA,GAAAA,cAAA"}
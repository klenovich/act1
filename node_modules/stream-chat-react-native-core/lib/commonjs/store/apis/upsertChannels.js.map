{"version":3,"names":["_upsertCidsForQuery","require","_upsertMembers","_upsertMessages","_upsertReads","_mapChannelDataToStorable","_QuickSqliteClient","_createUpsertQuery","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","upsertChannels","_ref","channels","filters","_ref$flush","flush","isLatestMessagesSet","sort","queries","channelIds","map","channel","cid","concat","upsertCidsForQuery","cids","_iterator","_step","push","createUpsertQuery","mapChannelDataToStorable","members","messages","read","upsertMembers","upsertReads","reads","upsertMessages","QuickSqliteClient","executeSqlBatch","exports"],"sources":["upsertChannels.ts"],"sourcesContent":["import type { ChannelAPIResponse, ChannelFilters, ChannelSort } from 'stream-chat';\n\nimport { upsertCidsForQuery } from './upsertCidsForQuery';\nimport { upsertMembers } from './upsertMembers';\n\nimport { upsertMessages } from './upsertMessages';\nimport { upsertReads } from './upsertReads';\n\nimport { mapChannelDataToStorable } from '../mappers/mapChannelDataToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const upsertChannels = ({\n  channels,\n  filters,\n  flush = true,\n  isLatestMessagesSet,\n  sort,\n}: {\n  channels: ChannelAPIResponse[];\n  filters?: ChannelFilters;\n  flush?: boolean;\n  isLatestMessagesSet?: boolean;\n  sort?: ChannelSort;\n}) => {\n  // Update the database only if the query is provided.\n  let queries: PreparedQueries[] = [];\n\n  if (filters || sort) {\n    const channelIds = channels.map((channel) => channel.channel.cid);\n    queries = queries.concat(\n      upsertCidsForQuery({\n        cids: channelIds,\n        filters,\n        flush: false,\n        sort,\n      }),\n    );\n  }\n\n  for (const channel of channels) {\n    queries.push(createUpsertQuery('channels', mapChannelDataToStorable(channel.channel)));\n\n    const { members, messages, read } = channel;\n    queries = queries.concat(\n      upsertMembers({\n        cid: channel.channel.cid,\n        flush: false,\n        members,\n      }),\n    );\n\n    if (read) {\n      queries = queries.concat(\n        upsertReads({\n          cid: channel.channel.cid,\n          flush: false,\n          reads: read,\n        }),\n      );\n    }\n\n    if (isLatestMessagesSet) {\n      queries = queries.concat(\n        upsertMessages({\n          flush: false,\n          messages,\n        }),\n      );\n    }\n  }\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(queries);\n  }\n\n  return queries;\n};\n"],"mappings":"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"}
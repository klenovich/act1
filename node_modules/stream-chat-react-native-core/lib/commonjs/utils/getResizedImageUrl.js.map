{"version":3,"names":["_reactNative","require","_StreamChatRN","getResizedImageUrl","_ref","height","_ref$resize","resize","url","width","parsedUrl","URL","originalHeight","searchParams","get","originalWidth","isResizableUrl","StreamChatRN","config","resizableCDNHosts","some","rCDNh","includes","set","PixelRatio","getPixelSizeForLayoutSize","Number","toString","error","console","warn"],"sources":["getResizedImageUrl.ts"],"sourcesContent":["import { PixelRatio } from 'react-native';\n\nimport { StreamChatRN } from './StreamChatRN';\n\nexport type GetResizedImageUrlParams = {\n  url: string;\n  height?: string | number;\n  resize?: 'clip' | 'crop' | 'fill' | 'scale';\n  width?: string | number;\n};\n\n/**\n * Any file or image upload done through stream's chat SDK or components get uploaded\n * to CloudFront CDN. Following function returns a url of resized image (to given width and height).\n * It can be used to avoid rendering heavy images on UI, for the sake of performance.\n *\n * This function accepts an object with following properties:\n * - height: height of the resized image.\n * - url: url of the image.\n * - width: width of the resized image.\n *\n * @returns {string} Url of the image with given height and width.\n */\nexport function getResizedImageUrl({\n  height,\n  resize = 'clip',\n  url,\n  width,\n}: GetResizedImageUrlParams) {\n  try {\n    const parsedUrl = new URL(url);\n\n    const originalHeight = parsedUrl.searchParams.get('oh');\n    const originalWidth = parsedUrl.searchParams.get('ow');\n\n    // If url is not within Stream's cloudfront CDN or any other configured resizableCDNHosts (which offers fast image resizing), then return the url as it is.\n    // Check for oh and ow parameters in the url, is just to differentiate between old and new CDN.\n    // In case of old CDN we don't want to do any kind of resizing.\n\n    const isResizableUrl =\n      StreamChatRN.config.resizableCDNHosts.some((rCDNh) => url.includes(rCDNh)) &&\n      originalHeight &&\n      originalWidth;\n\n    if (!isResizableUrl || (!height && !width)) return url;\n\n    if (height) {\n      parsedUrl.searchParams.set('h', `${PixelRatio.getPixelSizeForLayoutSize(Number(height))}`);\n    }\n\n    if (width) {\n      parsedUrl.searchParams.set('w', `${PixelRatio.getPixelSizeForLayoutSize(Number(width))}`);\n    }\n\n    parsedUrl.searchParams.set('resize', `${resize}`);\n\n    return parsedUrl.toString();\n  } catch (error) {\n    // There is some issue with the url.\n    // Simply return the original url, there is no need to break the app for this.\n    console.warn(error);\n\n    return url;\n  }\n}\n"],"mappings":";;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AAqBO,SAASE,kBAAkBA,CAAAC,IAAA,EAKL;EAAA,IAJ3BC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAAC,WAAA,GAAAF,IAAA,CACNG,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,MAAM,GAAAA,WAAA;IACfE,GAAG,GAAAJ,IAAA,CAAHI,GAAG;IACHC,KAAK,GAAAL,IAAA,CAALK,KAAK;EAEL,IAAI;IACF,IAAMC,SAAS,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC;IAE9B,IAAMI,cAAc,GAAGF,SAAS,CAACG,YAAY,CAACC,GAAG,CAAC,IAAI,CAAC;IACvD,IAAMC,aAAa,GAAGL,SAAS,CAACG,YAAY,CAACC,GAAG,CAAC,IAAI,CAAC;IAMtD,IAAME,cAAc,GAClBC,0BAAY,CAACC,MAAM,CAACC,iBAAiB,CAACC,IAAI,CAAC,UAACC,KAAK;MAAA,OAAKb,GAAG,CAACc,QAAQ,CAACD,KAAK,CAAC;IAAA,EAAC,IAC1ET,cAAc,IACdG,aAAa;IAEf,IAAI,CAACC,cAAc,IAAK,CAACX,MAAM,IAAI,CAACI,KAAM,EAAE,OAAOD,GAAG;IAEtD,IAAIH,MAAM,EAAE;MACVK,SAAS,CAACG,YAAY,CAACU,GAAG,CAAC,GAAG,OAAKC,uBAAU,CAACC,yBAAyB,CAACC,MAAM,CAACrB,MAAM,CAAC,CAAG,CAAC;IAC5F;IAEA,IAAII,KAAK,EAAE;MACTC,SAAS,CAACG,YAAY,CAACU,GAAG,CAAC,GAAG,OAAKC,uBAAU,CAACC,yBAAyB,CAACC,MAAM,CAACjB,KAAK,CAAC,CAAG,CAAC;IAC3F;IAEAC,SAAS,CAACG,YAAY,CAACU,GAAG,CAAC,QAAQ,OAAKhB,MAAQ,CAAC;IAEjD,OAAOG,SAAS,CAACiB,QAAQ,CAAC,CAAC;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IAGdC,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC;IAEnB,OAAOpB,GAAG;EACZ;AACF"}
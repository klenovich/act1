{"version":3,"names":["_react","require","_dayjs","_interopRequireDefault","_useIsMountedRef","_Streami18n","useStreami18n","i18nInstance","_useState","useState","t","key","tDateTimeParser","input","Dayjs","_useState2","_slicedToArray2","translators","setTranslators","isMounted","useIsMountedRef","useEffect","streami18n","Streami18n","language","updateTFunction","prevTranslator","_extends2","_streami18n$addOnLang","addOnLanguageChangeListener","unsubscribeOnLanguageChangeListener","unsubscribe","_streami18n$addOnTFun","addOnTFunctionOverrideListener","unsubscribeOnTFuncOverrideListener","getTranslators","then","translator","current","exports"],"sources":["useStreami18n.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport Dayjs from 'dayjs';\n\nimport { useIsMountedRef } from './useIsMountedRef';\n\nimport type { TranslatorFunctions } from '../contexts/translationContext/TranslationContext';\nimport { Streami18n } from '../utils/Streami18n';\n\nexport const useStreami18n = (i18nInstance?: Streami18n) => {\n  const [translators, setTranslators] = useState<TranslatorFunctions>({\n    t: (key: string) => key,\n    tDateTimeParser: (input?: string | number | Date) => Dayjs(input),\n  });\n  const isMounted = useIsMountedRef();\n\n  useEffect(() => {\n    let streami18n: Streami18n;\n\n    if (i18nInstance instanceof Streami18n) {\n      streami18n = i18nInstance;\n    } else {\n      streami18n = new Streami18n({ language: 'en' });\n    }\n\n    const updateTFunction = (t: TranslatorFunctions['t']) => {\n      setTranslators((prevTranslator) => ({ ...prevTranslator, t }));\n    };\n\n    const { unsubscribe: unsubscribeOnLanguageChangeListener } =\n      streami18n.addOnLanguageChangeListener((t) => {\n        updateTFunction(t);\n      });\n\n    const { unsubscribe: unsubscribeOnTFuncOverrideListener } =\n      streami18n.addOnTFunctionOverrideListener((t) => {\n        updateTFunction(t);\n      });\n\n    streami18n.getTranslators().then((translator) => {\n      if (translator && isMounted.current) setTranslators(translator);\n    });\n\n    return () => {\n      unsubscribeOnTFuncOverrideListener();\n      unsubscribeOnLanguageChangeListener();\n    };\n  }, [i18nInstance]);\n\n  return translators;\n};\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAC,sBAAA,CAAAF,OAAA;AAEA,IAAAG,gBAAA,GAAAH,OAAA;AAGA,IAAAI,WAAA,GAAAJ,OAAA;AAEO,IAAMK,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,YAAyB,EAAK;EAC1D,IAAAC,SAAA,GAAsC,IAAAC,eAAQ,EAAsB;MAClEC,CAAC,EAAE,SAAAA,EAACC,GAAW;QAAA,OAAKA,GAAG;MAAA;MACvBC,eAAe,EAAE,SAAAA,gBAACC,KAA8B;QAAA,OAAK,IAAAC,iBAAK,EAACD,KAAK,CAAC;MAAA;IACnE,CAAC,CAAC;IAAAE,UAAA,OAAAC,eAAA,aAAAR,SAAA;IAHKS,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAIlC,IAAMI,SAAS,GAAG,IAAAC,gCAAe,EAAC,CAAC;EAEnC,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAIC,UAAsB;IAE1B,IAAIf,YAAY,YAAYgB,sBAAU,EAAE;MACtCD,UAAU,GAAGf,YAAY;IAC3B,CAAC,MAAM;MACLe,UAAU,GAAG,IAAIC,sBAAU,CAAC;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACjD;IAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIf,CAA2B,EAAK;MACvDQ,cAAc,CAAC,UAACQ,cAAc;QAAA,WAAAC,SAAA,iBAAWD,cAAc;UAAEhB,CAAC,EAADA;QAAC;MAAA,CAAG,CAAC;IAChE,CAAC;IAED,IAAAkB,qBAAA,GACEN,UAAU,CAACO,2BAA2B,CAAC,UAACnB,CAAC,EAAK;QAC5Ce,eAAe,CAACf,CAAC,CAAC;MACpB,CAAC,CAAC;MAHiBoB,mCAAmC,GAAAF,qBAAA,CAAhDG,WAAW;IAKnB,IAAAC,qBAAA,GACEV,UAAU,CAACW,8BAA8B,CAAC,UAACvB,CAAC,EAAK;QAC/Ce,eAAe,CAACf,CAAC,CAAC;MACpB,CAAC,CAAC;MAHiBwB,kCAAkC,GAAAF,qBAAA,CAA/CD,WAAW;IAKnBT,UAAU,CAACa,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,UAAU,EAAK;MAC/C,IAAIA,UAAU,IAAIlB,SAAS,CAACmB,OAAO,EAAEpB,cAAc,CAACmB,UAAU,CAAC;IACjE,CAAC,CAAC;IAEF,OAAO,YAAM;MACXH,kCAAkC,CAAC,CAAC;MACpCJ,mCAAmC,CAAC,CAAC;IACvC,CAAC;EACH,CAAC,EAAE,CAACvB,YAAY,CAAC,CAAC;EAElB,OAAOU,WAAW;AACpB,CAAC;AAACsB,OAAA,CAAAjC,aAAA,GAAAA,aAAA"}
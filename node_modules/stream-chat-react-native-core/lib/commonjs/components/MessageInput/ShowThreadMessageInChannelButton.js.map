{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_MessageInputContext","_ThemeContext","_ThreadContext","_TranslationContext","_icons","_this","_jsxFileName","styles","StyleSheet","create","checkBox","alignItems","borderRadius","borderWidth","height","justifyContent","width","container","flexDirection","marginHorizontal","marginTop","innerContainer","text","fontSize","marginLeft","ShowThreadMessageInChannelButtonWithContext","props","allowThreadMessagesInChannel","sendThreadMessageInChannel","setSendThreadMessageInChannel","t","threadList","_useTheme","useTheme","_useTheme$theme","theme","_useTheme$theme$color","colors","accent_blue","grey","white","_useTheme$theme$messa","messageInput","showThreadMessageInChannelButton","check","checkBoxActive","checkBoxInactive","createElement","View","style","testID","__self","__source","fileName","lineNumber","columnNumber","TouchableOpacity","onPress","prevSendInChannel","_extends2","backgroundColor","borderColor","Check","pathFill","Text","color","exports","areEqual","prevProps","nextProps","prevAllowThreadMessagesInChannel","prevSendThreadMessageInChannel","prevT","prevThreadList","nextAllowThreadMessagesInChannel","nexSendThreadMessageInChannel","nextT","nextThreadList","tEqual","sendThreadMessageInChannelEqual","threadListEqual","allowThreadMessagesInChannelEqual","MemoizedShowThreadMessageInChannelButton","React","memo","ShowThreadMessageInChannelButton","_useTranslationContex","useTranslationContext","_useThreadContext","useThreadContext","_useMessageInputConte","useMessageInputContext","displayName"],"sources":["ShowThreadMessageInChannelButton.tsx"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport {\n  MessageInputContextValue,\n  useMessageInputContext,\n} from '../../contexts/messageInputContext/MessageInputContext';\nimport { useTheme } from '../../contexts/themeContext/ThemeContext';\nimport { ThreadContextValue, useThreadContext } from '../../contexts/threadContext/ThreadContext';\nimport {\n  TranslationContextValue,\n  useTranslationContext,\n} from '../../contexts/translationContext/TranslationContext';\nimport { Check } from '../../icons';\n\nimport type { DefaultStreamChatGenerics } from '../../types/types';\n\nconst styles = StyleSheet.create({\n  checkBox: {\n    alignItems: 'center',\n    borderRadius: 3,\n    borderWidth: 2,\n    height: 16,\n    justifyContent: 'center',\n    width: 16,\n  },\n  container: {\n    flexDirection: 'row',\n    marginHorizontal: 2,\n    marginTop: 8,\n  },\n  innerContainer: {\n    flexDirection: 'row',\n  },\n  text: {\n    fontSize: 13,\n    marginLeft: 12,\n  },\n});\n\nexport type ShowThreadMessageInChannelButtonWithContextProps = Pick<\n  MessageInputContextValue,\n  'sendThreadMessageInChannel' | 'setSendThreadMessageInChannel'\n> &\n  Pick<ThreadContextValue, 'allowThreadMessagesInChannel'> &\n  Pick<TranslationContextValue, 't'> & {\n    threadList?: boolean;\n  };\n\nexport const ShowThreadMessageInChannelButtonWithContext: React.FC<ShowThreadMessageInChannelButtonWithContextProps> =\n  (props) => {\n    const {\n      allowThreadMessagesInChannel,\n      sendThreadMessageInChannel,\n      setSendThreadMessageInChannel,\n      t,\n      threadList,\n    } = props;\n\n    const {\n      theme: {\n        colors: { accent_blue, grey, white },\n        messageInput: {\n          showThreadMessageInChannelButton: {\n            check,\n            checkBoxActive,\n            checkBoxInactive,\n            container,\n            innerContainer,\n            text,\n          },\n        },\n      },\n    } = useTheme();\n\n    if (!threadList || !allowThreadMessagesInChannel) {\n      return null;\n    }\n\n    return (\n      <View style={[styles.container, container]} testID='show-thread-message-in-channel-button'>\n        <TouchableOpacity\n          onPress={() => setSendThreadMessageInChannel((prevSendInChannel) => !prevSendInChannel)}\n        >\n          <View style={[styles.innerContainer, innerContainer]}>\n            <View\n              style={[\n                styles.checkBox,\n                sendThreadMessageInChannel\n                  ? {\n                      backgroundColor: accent_blue,\n                      borderColor: accent_blue,\n                      ...checkBoxActive,\n                    }\n                  : { borderColor: grey, ...checkBoxInactive },\n              ]}\n            >\n              {sendThreadMessageInChannel && (\n                <Check height={16} pathFill={white} width={16} {...check} />\n              )}\n            </View>\n            <Text style={[styles.text, { color: grey }, text]}>{t('Also send to channel')}</Text>\n          </View>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\nconst areEqual = (\n  prevProps: ShowThreadMessageInChannelButtonWithContextProps,\n  nextProps: ShowThreadMessageInChannelButtonWithContextProps,\n) => {\n  const {\n    allowThreadMessagesInChannel: prevAllowThreadMessagesInChannel,\n    sendThreadMessageInChannel: prevSendThreadMessageInChannel,\n    t: prevT,\n    threadList: prevThreadList,\n  } = prevProps;\n  const {\n    allowThreadMessagesInChannel: nextAllowThreadMessagesInChannel,\n    sendThreadMessageInChannel: nexSendThreadMessageInChannel,\n    t: nextT,\n    threadList: nextThreadList,\n  } = nextProps;\n\n  const tEqual = prevT === nextT;\n  if (!tEqual) return false;\n\n  const sendThreadMessageInChannelEqual =\n    prevSendThreadMessageInChannel === nexSendThreadMessageInChannel;\n  if (!sendThreadMessageInChannelEqual) return false;\n\n  const threadListEqual = prevThreadList === nextThreadList;\n  if (!threadListEqual) return false;\n\n  const allowThreadMessagesInChannelEqual =\n    prevAllowThreadMessagesInChannel === nextAllowThreadMessagesInChannel;\n  if (!allowThreadMessagesInChannelEqual) return false;\n\n  return true;\n};\n\nconst MemoizedShowThreadMessageInChannelButton = React.memo(\n  ShowThreadMessageInChannelButtonWithContext,\n  areEqual,\n) as typeof ShowThreadMessageInChannelButtonWithContext;\n\nexport type ShowThreadMessageInChannelButtonProps =\n  Partial<ShowThreadMessageInChannelButtonWithContextProps>;\n\nexport const ShowThreadMessageInChannelButton = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ShowThreadMessageInChannelButtonProps,\n) => {\n  const { t } = useTranslationContext();\n  const { allowThreadMessagesInChannel } = useThreadContext<StreamChatGenerics>();\n  const { sendThreadMessageInChannel, setSendThreadMessageInChannel } =\n    useMessageInputContext<StreamChatGenerics>();\n\n  return (\n    <MemoizedShowThreadMessageInChannelButton\n      {...{\n        allowThreadMessagesInChannel,\n        sendThreadMessageInChannel,\n        setSendThreadMessageInChannel,\n        t,\n      }}\n      {...props}\n    />\n  );\n};\n\nShowThreadMessageInChannelButton.displayName =\n  'ShowThreadMessageInChannelButton{messageInput{showThreadMessageInChannelButton}}';\n"],"mappings":"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"}
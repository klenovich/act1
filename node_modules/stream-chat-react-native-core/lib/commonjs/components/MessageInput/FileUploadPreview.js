var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileUploadPreview = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _UploadProgressIndicator = require("./UploadProgressIndicator");
var _contexts = require("../../contexts");
var _MessageInputContext = require("../../contexts/messageInputContext/MessageInputContext");
var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _TranslationContext = require("../../contexts/translationContext/TranslationContext");
var _Close = require("../../icons/Close");
var _Warning = require("../../icons/Warning");
var _native = require("../../native");
var _utils = require("../../utils/utils");
var _FileAttachment = require("../Attachment/FileAttachment");
var _WritingDirectionAwareText = require("../RTLComponents/WritingDirectionAwareText");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageInput/FileUploadPreview.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var FILE_PREVIEW_HEIGHT = 60;
var WARNING_ICON_SIZE = 16;
var styles = _reactNative.StyleSheet.create({
  dismiss: {
    borderRadius: 24,
    height: 24,
    position: 'absolute',
    right: 8,
    top: 8,
    width: 24
  },
  fileContainer: {
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    height: FILE_PREVIEW_HEIGHT,
    justifyContent: 'space-between',
    marginBottom: 8,
    paddingLeft: 8,
    paddingRight: 8
  },
  fileContentContainer: {
    flexDirection: 'row'
  },
  fileIcon: {
    alignItems: 'center',
    alignSelf: 'center',
    justifyContent: 'center'
  },
  filenameText: {
    fontSize: 14,
    fontWeight: 'bold',
    paddingHorizontal: 10
  },
  fileSizeText: {
    fontSize: 12,
    paddingHorizontal: 10
  },
  fileTextContainer: {
    height: '100%',
    justifyContent: 'space-around'
  },
  flatList: {
    marginBottom: 12,
    maxHeight: FILE_PREVIEW_HEIGHT * 2.5 + 16
  },
  overlay: {
    borderRadius: 12,
    marginLeft: 8,
    marginRight: 8,
    marginTop: 2
  },
  unsupportedFile: {
    flexDirection: 'row',
    paddingLeft: 10
  },
  unsupportedFileText: {
    fontSize: 12,
    marginHorizontal: 4
  },
  warningIconStyle: {
    borderRadius: 24,
    marginTop: 2
  }
});
var UnsupportedFileTypeOrFileSizeIndicator = function UnsupportedFileTypeOrFileSizeIndicator(_ref) {
  var indicatorType = _ref.indicatorType,
    item = _ref.item;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_red = _useTheme$theme$color.accent_red,
    grey = _useTheme$theme$color.grey,
    grey_dark = _useTheme$theme$color.grey_dark,
    fileSizeText = _useTheme$theme.messageInput.fileUploadPreview.fileSizeText;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t;
  return indicatorType === _utils.ProgressIndicatorTypes.NOT_SUPPORTED ? _react["default"].createElement(_reactNative.View, {
    style: styles.unsupportedFile,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 107,
      columnNumber: 5
    }
  }, _react["default"].createElement(_Warning.Warning, {
    height: WARNING_ICON_SIZE,
    pathFill: accent_red,
    style: styles.warningIconStyle,
    width: WARNING_ICON_SIZE,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 108,
      columnNumber: 7
    }
  }), _react["default"].createElement(_reactNative.Text, {
    style: [styles.unsupportedFileText, {
      color: grey_dark
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 114,
      columnNumber: 7
    }
  }, t('File type not supported'))) : _react["default"].createElement(_WritingDirectionAwareText.WritingDirectionAwareText, {
    style: [styles.fileSizeText, {
      color: grey
    }, fileSizeText],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 5
    }
  }, item.file.duration || (0, _FileAttachment.getFileSizeDisplayText)(item.file.size));
};
var FileUploadPreviewWithContext = function FileUploadPreviewWithContext(props) {
  var AudioAttachment = props.AudioAttachment,
    enableOfflineSupport = props.enableOfflineSupport,
    FileAttachmentIcon = props.FileAttachmentIcon,
    fileUploads = props.fileUploads,
    removeFile = props.removeFile,
    setFileUploads = props.setFileUploads,
    uploadFile = props.uploadFile;
  var flatListRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    flatListWidth = _useState2[0],
    setFlatListWidth = _useState2[1];
  var onLoad = function onLoad(index, duration) {
    setFileUploads(function (prevFileUploads) {
      return prevFileUploads.map(function (fileUpload) {
        return (0, _extends2["default"])({}, fileUpload, {
          duration: fileUpload.id === index ? duration : fileUpload.duration
        });
      });
    });
  };
  var onProgress = function onProgress(index, currentTime, hasEnd) {
    setFileUploads(function (prevFileUploads) {
      return prevFileUploads.map(function (fileUpload) {
        return (0, _extends2["default"])({}, fileUpload, {
          progress: fileUpload.id === index ? hasEnd ? 1 : currentTime ? currentTime / fileUpload.duration : 0 : fileUpload.progress
        });
      });
    });
  };
  var onPlayPause = function onPlayPause(index, pausedStatus) {
    if (pausedStatus === false) {
      setFileUploads(function (prevFileUploads) {
        return prevFileUploads.map(function (fileUpload) {
          return (0, _extends2["default"])({}, fileUpload, {
            paused: fileUpload.id !== index
          });
        });
      });
    } else {
      setFileUploads(function (prevFileUploads) {
        return prevFileUploads.map(function (fileUpload) {
          return (0, _extends2["default"])({}, fileUpload, {
            paused: true
          });
        });
      });
    }
  };
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    _useTheme2$theme$colo = _useTheme2$theme.colors,
    black = _useTheme2$theme$colo.black,
    grey_dark = _useTheme2$theme$colo.grey_dark,
    grey_gainsboro = _useTheme2$theme$colo.grey_gainsboro,
    grey_whisper = _useTheme2$theme$colo.grey_whisper,
    white = _useTheme2$theme$colo.white,
    _useTheme2$theme$mess = _useTheme2$theme.messageInput.fileUploadPreview,
    audioAttachmentFileContainer = _useTheme2$theme$mess.audioAttachmentFileContainer,
    dismiss = _useTheme2$theme$mess.dismiss,
    fileContainer = _useTheme2$theme$mess.fileContainer,
    fileContentContainer = _useTheme2$theme$mess.fileContentContainer,
    filenameText = _useTheme2$theme$mess.filenameText,
    fileTextContainer = _useTheme2$theme$mess.fileTextContainer,
    flatList = _useTheme2$theme$mess.flatList;
  var renderItem = function renderItem(_ref2) {
    var _item$file$mimeType;
    var index = _ref2.index,
      item = _ref2.item;
    var indicatorType = (0, _utils.getIndicatorTypeForFileState)(item.state, enableOfflineSupport);
    var lastIndexOfDot = item.file.name.lastIndexOf('.');
    return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_UploadProgressIndicator.UploadProgressIndicator, {
      action: function action() {
        uploadFile({
          newFile: item
        });
      },
      style: styles.overlay,
      type: indicatorType,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 224,
        columnNumber: 9
      }
    }, (_item$file$mimeType = item.file.mimeType) != null && _item$file$mimeType.startsWith('audio/') && (0, _native.isAudioPackageAvailable)() ? _react["default"].createElement(_reactNative.View, {
      style: [{
        marginBottom: item.state === _utils.FileState.UPLOADED ? 8 : 0
      }, audioAttachmentFileContainer],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 232,
        columnNumber: 13
      }
    }, _react["default"].createElement(_reactNative.View, {
      style: [styles.fileContainer, index === fileUploads.length - 1 ? {
        marginBottom: 0
      } : {}, {
        backgroundColor: white,
        borderColor: grey_whisper,
        width: -16
      }, fileContainer],
      testID: "audio-attachment-upload-preview",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 238,
        columnNumber: 15
      }
    }, _react["default"].createElement(AudioAttachment, {
      item: item,
      onLoad: onLoad,
      onPlayPause: onPlayPause,
      onProgress: onProgress,
      testID: "audio-attachment-upload-preview",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 255,
        columnNumber: 17
      }
    }))) : _react["default"].createElement(_reactNative.View, {
      style: [styles.fileContainer, index === fileUploads.length - 1 ? {
        marginBottom: 0
      } : {}, {
        borderColor: grey_whisper,
        width: flatListWidth - 16
      }, fileContainer],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 265,
        columnNumber: 13
      }
    }, _react["default"].createElement(_reactNative.View, {
      style: [styles.fileContentContainer, fileContentContainer],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 280,
        columnNumber: 15
      }
    }, _react["default"].createElement(_reactNative.View, {
      style: styles.fileIcon,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 281,
        columnNumber: 17
      }
    }, _react["default"].createElement(FileAttachmentIcon, {
      mimeType: item.file.mimeType,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 282,
        columnNumber: 19
      }
    })), _react["default"].createElement(_reactNative.View, {
      style: [styles.fileTextContainer, fileTextContainer],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 284,
        columnNumber: 17
      }
    }, _react["default"].createElement(_reactNative.Text, {
      numberOfLines: 1,
      style: [styles.filenameText, {
        color: black,
        width: flatListWidth - 16 - 40 - 24 - 24
      }, _reactNative.I18nManager.isRTL ? {
        writingDirection: 'rtl'
      } : {
        writingDirection: 'ltr'
      }, filenameText],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 285,
        columnNumber: 19
      }
    }, item.file.name.slice(0, 12) + '...' + item.file.name.slice(lastIndexOfDot)), indicatorType !== null && _react["default"].createElement(UnsupportedFileTypeOrFileSizeIndicator, {
      indicatorType: indicatorType,
      item: item,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 305,
        columnNumber: 21
      }
    })))), _react["default"].createElement(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        removeFile(item.id);
      },
      style: [styles.dismiss, {
        backgroundColor: grey_gainsboro
      }, dismiss],
      testID: "remove-file-upload-preview",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 314,
        columnNumber: 11
      }
    }, _react["default"].createElement(_Close.Close, {
      pathFill: grey_dark,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 321,
        columnNumber: 13
      }
    }))));
  };
  var fileUploadsLength = fileUploads.length;
  (0, _react.useEffect)(function () {
    if (fileUploadsLength && flatListRef.current) {
      setTimeout(function () {
        var _flatListRef$current;
        return (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToEnd();
      }, 1);
    }
  }, [fileUploadsLength]);
  return fileUploadsLength ? _react["default"].createElement(_reactNative.FlatList, {
    data: fileUploads,
    getItemLayout: function getItemLayout(_, index) {
      return {
        index: index,
        length: FILE_PREVIEW_HEIGHT + 8,
        offset: (FILE_PREVIEW_HEIGHT + 8) * index
      };
    },
    keyExtractor: function keyExtractor(item) {
      return "" + item.id;
    },
    onLayout: function onLayout(_ref3) {
      var width = _ref3.nativeEvent.layout.width;
      setFlatListWidth(width);
    },
    ref: flatListRef,
    renderItem: renderItem,
    style: [styles.flatList, flatList],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 337,
      columnNumber: 5
    }
  }) : null;
};
var areEqual = function areEqual(prevProps, nextProps) {
  var prevFileUploads = prevProps.fileUploads;
  var nextFileUploads = nextProps.fileUploads;
  return prevFileUploads.length === nextFileUploads.length && prevFileUploads.every(function (prevFileUpload, index) {
    return prevFileUpload.state === nextFileUploads[index].state && prevFileUpload.paused === nextFileUploads[index].paused && prevFileUpload.progress === nextFileUploads[index].progress && prevFileUpload.duration === nextFileUploads[index].duration;
  });
};
var MemoizedFileUploadPreview = _react["default"].memo(FileUploadPreviewWithContext, areEqual);
var FileUploadPreview = function FileUploadPreview(props) {
  var _useChatContext = (0, _contexts.useChatContext)(),
    enableOfflineSupport = _useChatContext.enableOfflineSupport;
  var _useMessageInputConte = (0, _MessageInputContext.useMessageInputContext)(),
    fileUploads = _useMessageInputConte.fileUploads,
    removeFile = _useMessageInputConte.removeFile,
    setFileUploads = _useMessageInputConte.setFileUploads,
    uploadFile = _useMessageInputConte.uploadFile;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    AudioAttachment = _useMessagesContext.AudioAttachment,
    FileAttachmentIcon = _useMessagesContext.FileAttachmentIcon;
  return _react["default"].createElement(MemoizedFileUploadPreview, (0, _extends2["default"])({
    AudioAttachment: AudioAttachment,
    FileAttachmentIcon: FileAttachmentIcon,
    fileUploads: fileUploads,
    removeFile: removeFile,
    setFileUploads: setFileUploads,
    uploadFile: uploadFile,
    enableOfflineSupport: enableOfflineSupport
  }, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 402,
      columnNumber: 5
    }
  }));
};
exports.FileUploadPreview = FileUploadPreview;
FileUploadPreview.displayName = 'FileUploadPreview{messageInput{fileUploadPreview}}';
//# sourceMappingURL=FileUploadPreview.js.map
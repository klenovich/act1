var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ImageGrid = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _bottomSheet = require("@gorhom/bottom-sheet");
var _VideoThumbnail = require("../../../components/Attachment/VideoThumbnail");
var _ThemeContext = require("../../../contexts/themeContext/ThemeContext");
var _utils = require("../../../utils/utils");
var _excluded = ["imageComponent"];
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ImageGallery/components/ImageGrid.tsx";
var styles = _reactNative.StyleSheet.create({
  avatarImage: {
    borderRadius: 22,
    height: 22,
    width: 22
  },
  avatarImageWrapper: {
    borderRadius: 24,
    borderWidth: 1,
    height: 24,
    margin: 8,
    width: 24
  },
  contentContainer: {
    flexGrow: 1
  },
  image: {
    margin: 1
  }
});
var GridImage = function GridImage(_ref) {
  var item = _ref.item;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    gridImage = _useTheme.theme.imageGallery.grid.gridImage;
  var imageComponent = item.imageComponent,
    restItem = (0, _objectWithoutProperties2["default"])(item, _excluded);
  var numberOfImageGalleryGridColumns = restItem.numberOfImageGalleryGridColumns,
    selectAndClose = restItem.selectAndClose,
    type = restItem.type,
    uri = restItem.uri;
  var size = (0, _utils.vw)(100) / (numberOfImageGalleryGridColumns || 3) - 2;
  if (imageComponent) {
    return imageComponent({
      item: restItem
    });
  }
  return _react["default"].createElement(_bottomSheet.TouchableOpacity, {
    accessibilityLabel: "Grid Image",
    onPress: selectAndClose,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85,
      columnNumber: 5
    }
  }, type === 'video' ? _react["default"].createElement(_reactNative.View, {
    style: [styles.image, {
      height: size,
      width: size
    }, gridImage],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 87,
      columnNumber: 9
    }
  }, _react["default"].createElement(_VideoThumbnail.VideoThumbnail, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 88,
      columnNumber: 11
    }
  })) : _react["default"].createElement(_reactNative.Image, {
    source: {
      uri: uri
    },
    style: [styles.image, {
      height: size,
      width: size
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 9
    }
  }));
};
var renderItem = function renderItem(_ref2) {
  var item = _ref2.item;
  return _react["default"].createElement(GridImage, {
    item: item,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 7
    }
  });
};
var ImageGrid = function ImageGrid(props) {
  var avatarComponent = props.avatarComponent,
    closeGridView = props.closeGridView,
    imageComponent = props.imageComponent,
    numberOfImageGalleryGridColumns = props.numberOfImageGalleryGridColumns,
    photos = props.photos,
    setSelectedMessage = props.setSelectedMessage;
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    _useTheme2$theme = _useTheme2.theme,
    white = _useTheme2$theme.colors.white,
    _useTheme2$theme$imag = _useTheme2$theme.imageGallery.grid,
    container = _useTheme2$theme$imag.container,
    contentContainer = _useTheme2$theme$imag.contentContainer;
  var imageGridItems = photos.map(function (photo) {
    return (0, _extends2["default"])({}, photo, {
      avatarComponent: avatarComponent,
      imageComponent: imageComponent,
      numberOfImageGalleryGridColumns: numberOfImageGalleryGridColumns,
      selectAndClose: function selectAndClose() {
        setSelectedMessage({
          messageId: photo.messageId,
          url: photo.uri
        });
        closeGridView();
      }
    });
  });
  return _react["default"].createElement(_bottomSheet.BottomSheetFlatList, {
    accessibilityLabel: "Image Grid",
    contentContainerStyle: [styles.contentContainer, {
      backgroundColor: white
    }, contentContainer],
    data: imageGridItems,
    keyExtractor: function keyExtractor(item, index) {
      return item.uri + "-" + index;
    },
    numColumns: numberOfImageGalleryGridColumns || 3,
    renderItem: renderItem,
    style: container,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 5
    }
  });
};
exports.ImageGrid = ImageGrid;
ImageGrid.displayName = 'ImageGrid{imageGallery{grid}}';
//# sourceMappingURL=ImageGrid.js.map
{"version":3,"names":["getReadStates","clientUserId","messages","read","readData","reduce","acc","cur","id","filteredMessagesReversed","filter","msg","updated_at","reverse","_ignore","filteredRead","_objectWithoutProperties2","map","_toPropertyKey","members","Object","values","memberReadCount","_iterator","_createForOfIteratorHelperLoose","_step","done","message","value","length","_loop","member","last_read","created_at","numberOfReads","keys","currentMessageReadData","userIndex","findIndex","_ref","_member$user","user","splice","_iterator2","_step2","_ret","exports"],"sources":["getReadStates.ts"],"sourcesContent":["import type { ChannelContextValue } from '../../../contexts/channelContext/ChannelContext';\nimport type { PaginatedMessageListContextValue } from '../../../contexts/paginatedMessageListContext/PaginatedMessageListContext';\nimport type { ThreadContextValue } from '../../../contexts/threadContext/ThreadContext';\nimport type { DefaultStreamChatGenerics } from '../../../types/types';\n\nexport const getReadStates = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  clientUserId: string | undefined,\n  messages:\n    | PaginatedMessageListContextValue<StreamChatGenerics>['messages']\n    | ThreadContextValue<StreamChatGenerics>['threadMessages'],\n  read?: ChannelContextValue<StreamChatGenerics>['read'],\n) => {\n  const readData = messages.reduce((acc, cur) => {\n    if (cur.id) {\n      acc[cur.id] = false;\n    }\n    return acc;\n  }, {} as { [key: string]: boolean | number });\n\n  const filteredMessagesReversed = messages.filter((msg) => msg.updated_at).reverse();\n\n  if (read) {\n    /**\n     * Channel read state is stored by user and we only care about users who aren't the client\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { [clientUserId ?? '']: _ignore, ...filteredRead } = read;\n    const members = Object.values(filteredRead);\n\n    /**\n     * Track number of members who have read previous messages\n     */\n    let memberReadCount = 0;\n\n    /**\n     * Array is in reverse order so newest message is at 0,\n     * we find the index of the first message that is older\n     * than the last read and then set last read to that, or\n     * if there are no newer messages, the first message is\n     * last read message.\n     */\n    for (const message of filteredMessagesReversed) {\n      /**\n       * If all members are removed then they have read these\n       * messages. We do not increment memberReadCount for 1:1\n       * chats, so this should be true, not a number in that case.\n       */\n      if (!members.length) {\n        readData[message.id] = memberReadCount || true;\n      } else {\n        for (const member of members) {\n          /**\n           * If no last read continue, we can't remove the user\n           * because this would mark all messages in a new channel\n           * true until at least one other user reads a message.\n           */\n          if (!member.last_read) {\n            continue;\n          }\n\n          /**\n           * If there there is a last read message add the user\n           * to the array of last reads for that message and remove\n           * the user from the list of users being checked\n           */\n          if (message.created_at < member.last_read) {\n            /**\n             * if this is a direct message the length will be 1\n             * as we already deleted the current user from the object\n             */\n            const numberOfReads = Object.keys(read).length;\n            if (numberOfReads === 1) {\n              readData[message.id] = true;\n            } else {\n              const currentMessageReadData = readData[message.id];\n              readData[message.id] =\n                typeof currentMessageReadData === 'boolean'\n                  ? memberReadCount + 1\n                  : currentMessageReadData + 1;\n            }\n            const userIndex = members.findIndex(({ user }) => user.id === member.user?.id);\n            if (userIndex !== -1) {\n              members.splice(userIndex, 1);\n              if (numberOfReads > 1) {\n                memberReadCount += 1;\n              }\n            }\n          }\n        }\n\n        /**\n         * If this is not the last message for a user this will still be\n         * set to false. But if other users have read further the number\n         * should be how many have read beyond this message.\n         */\n        if (readData[message.id] === false) {\n          readData[message.id] = memberReadCount || false;\n        }\n      }\n    }\n  }\n\n  return readData;\n};\n"],"mappings":"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"}
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoCompleteSuggestionListWithContext = exports.AutoCompleteSuggestionList = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _SuggestionsContext = require("../../contexts/suggestionsContext/SuggestionsContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _excluded = ["children"];
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/AutoCompleteInput/AutoCompleteSuggestionList.tsx";
var SuggestionsItem = function SuggestionsItem(props) {
  var children = props.children,
    touchableOpacityProps = (0, _objectWithoutProperties2["default"])(props, _excluded);
  return _react["default"].createElement(_reactNative.TouchableOpacity, (0, _extends2["default"])({}, touchableOpacityProps, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 36,
      columnNumber: 10
    }
  }), children);
};
SuggestionsItem.displayName = 'SuggestionsHeader{messageInput{suggestions}}';
var AutoCompleteSuggestionListWithContext = function AutoCompleteSuggestionListWithContext(props) {
  var active = props.active,
    AutoCompleteSuggestionHeader = props.AutoCompleteSuggestionHeader,
    AutoCompleteSuggestionItem = props.AutoCompleteSuggestionItem,
    data = props.data,
    onSelect = props.onSelect,
    queryText = props.queryText,
    triggerType = props.triggerType;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme$messa = _useTheme.theme.messageInput,
    maxHeight = _useTheme$theme$messa.container.maxHeight,
    itemStyle = _useTheme$theme$messa.suggestions.item,
    flatlist = _useTheme$theme$messa.suggestionsListContainer.flatlist;
  var renderItem = function renderItem(_ref) {
    var index = _ref.index,
      item = _ref.item;
    switch (triggerType) {
      case 'mention':
        if ((0, _SuggestionsContext.isSuggestionUser)(item)) {
          return _react["default"].createElement(SuggestionsItem, {
            onPress: function onPress() {
              onSelect(item);
            },
            style: [{
              paddingBottom: index === data.length - 1 ? 8 : 0,
              paddingTop: index === 0 ? 8 : 0
            }, itemStyle],
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 71,
              columnNumber: 13
            }
          }, AutoCompleteSuggestionItem && _react["default"].createElement(AutoCompleteSuggestionItem, {
            itemProps: item,
            triggerType: triggerType,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84,
              columnNumber: 17
            }
          }));
        }
        return null;
      case 'command':
        if ((0, _SuggestionsContext.isSuggestionCommand)(item)) {
          return _react["default"].createElement(SuggestionsItem, {
            onPress: function onPress() {
              onSelect(item);
            },
            style: [itemStyle],
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 93,
              columnNumber: 13
            }
          }, AutoCompleteSuggestionItem && _react["default"].createElement(AutoCompleteSuggestionItem, {
            itemProps: item,
            triggerType: triggerType,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 100,
              columnNumber: 17
            }
          }));
        }
        return null;
      case 'emoji':
        if ((0, _SuggestionsContext.isSuggestionEmoji)(item)) {
          return _react["default"].createElement(SuggestionsItem, {
            onPress: function onPress() {
              onSelect(item);
            },
            style: [itemStyle],
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109,
              columnNumber: 13
            }
          }, AutoCompleteSuggestionItem && _react["default"].createElement(AutoCompleteSuggestionItem, {
            itemProps: item,
            triggerType: triggerType,
            __self: _this,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 116,
              columnNumber: 17
            }
          }));
        }
        return null;
      default:
        return null;
    }
  };
  if (!active || data.length === 0) return null;
  return _react["default"].createElement(_reactNative.FlatList, {
    data: data,
    keyboardShouldPersistTaps: "always",
    keyExtractor: function keyExtractor(item, index) {
      return "" + (item.name || ((0, _SuggestionsContext.isSuggestionUser)(item) ? item.id : '')) + index;
    },
    ListHeaderComponent: AutoCompleteSuggestionHeader ? _react["default"].createElement(AutoCompleteSuggestionHeader, {
      queryText: queryText,
      triggerType: triggerType,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 138,
        columnNumber: 11
      }
    }) : null,
    renderItem: renderItem,
    style: [flatlist, {
      maxHeight: maxHeight
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 130,
      columnNumber: 5
    }
  });
};
exports.AutoCompleteSuggestionListWithContext = AutoCompleteSuggestionListWithContext;
var areEqual = function areEqual(prevProps, nextProps) {
  var prevActive = prevProps.active,
    prevData = prevProps.data,
    prevQueryText = prevProps.queryText,
    prevType = prevProps.triggerType;
  var nextActive = nextProps.active,
    nextData = nextProps.data,
    nextQueryText = nextProps.queryText,
    nextType = nextProps.triggerType;
  var activeEqual = prevActive === nextActive;
  if (!activeEqual) return false;
  var queryTextEqual = prevQueryText === nextQueryText;
  if (!queryTextEqual) return false;
  var dataEqual = prevData === nextData;
  if (!dataEqual) return false;
  var typeEqual = prevType === nextType;
  if (!typeEqual) return false;
  return true;
};
var MemoizedAutoCompleteSuggestionList = _react["default"].memo(AutoCompleteSuggestionListWithContext, areEqual);
var AutoCompleteSuggestionList = function AutoCompleteSuggestionList(props) {
  var _useSuggestionsContex = (0, _SuggestionsContext.useSuggestionsContext)(),
    AutoCompleteSuggestionHeader = _useSuggestionsContex.AutoCompleteSuggestionHeader,
    AutoCompleteSuggestionItem = _useSuggestionsContex.AutoCompleteSuggestionItem;
  return _react["default"].createElement(MemoizedAutoCompleteSuggestionList, (0, _extends2["default"])({
    AutoCompleteSuggestionHeader: AutoCompleteSuggestionHeader,
    AutoCompleteSuggestionItem: AutoCompleteSuggestionItem
  }, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 202,
      columnNumber: 5
    }
  }));
};
exports.AutoCompleteSuggestionList = AutoCompleteSuggestionList;
AutoCompleteSuggestionList.displayName = 'AutoCompleteSuggestionList{messageInput{suggestions{List}}}';
//# sourceMappingURL=AutoCompleteSuggestionList.js.map
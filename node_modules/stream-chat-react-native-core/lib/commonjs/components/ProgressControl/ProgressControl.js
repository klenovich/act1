var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressControl = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ProgressControl/ProgressControl.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var height = 2;
var styles = _reactNative.StyleSheet.create({
  containerStyle: {
    borderRadius: 50,
    height: height
  },
  innerStyle: {
    height: height
  },
  progressControlThumbStyle: {
    borderRadius: 5,
    elevation: 6,
    height: 20,
    shadowOffset: {
      height: 3,
      width: 0
    },
    shadowOpacity: 0.27,
    shadowRadius: 4.65,
    top: -11,
    width: 5
  }
});
var ProgressControlThumb = function ProgressControlThumb() {
  var _useTheme = (0, _ThemeContext.useTheme)(),
    black = _useTheme.theme.colors.black;
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.progressControlThumbStyle, {
      backgroundColor: '#ffffff',
      shadowColor: black
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 55,
      columnNumber: 5
    }
  });
};
var ProgressControl = _react["default"].memo(function (props) {
  var duration = props.duration,
    filledColor = props.filledColor,
    onPlayPause = props.onPlayPause,
    onProgressDrag = props.onProgressDrag,
    progress = props.progress,
    testID = props.testID,
    width = props.width;
  var _useTheme2 = (0, _ThemeContext.useTheme)(),
    grey_dark = _useTheme2.theme.colors.grey_dark;
  var state = (0, _reactNativeReanimated.useSharedValue)(0);
  var translateX = (0, _reactNativeReanimated.useSharedValue)(0);
  (0, _react.useEffect)(function () {
    state.value = progress * width;
    translateX.value = progress * width;
  }, [progress]);
  var animatedStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      backgroundColor: filledColor,
      width: state.value
    };
  });
  var thumbStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    return {
      transform: [{
        translateX: state.value
      }]
    };
  });
  var onGestureEvent = (0, _reactNativeReanimated.useAnimatedGestureHandler)({
    onActive: function onActive(event) {
      state.value = translateX.value + event.translationX;
      if (state.value > width) state.value = width;else if (state.value < 0) state.value = 0;
    },
    onFinish: function onFinish() {
      translateX.value = state.value;
      var dragFinishLocationInSeconds = state.value / width * duration;
      if (onProgressDrag) (0, _reactNativeReanimated.runOnJS)(onProgressDrag)(dragFinishLocationInSeconds);
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)(false);
    },
    onStart: function onStart() {
      (0, _reactNativeReanimated.runOnJS)(onPlayPause)(true);
      (0, _reactNativeReanimated.cancelAnimation)(translateX);
      state.value = translateX.value;
    }
  }, [duration]);
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.containerStyle, {
      backgroundColor: grey_dark,
      width: width
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 109,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [styles.innerStyle, animatedStyles],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 110,
      columnNumber: 9
    }
  }), _react["default"].createElement(_reactNativeGestureHandler.PanGestureHandler, {
    maxPointers: 1,
    onGestureEvent: onProgressDrag ? onGestureEvent : undefined,
    testID: testID,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 112,
      columnNumber: 9
    }
  }, _react["default"].createElement(_reactNativeReanimated["default"].View, {
    style: [thumbStyles],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117,
      columnNumber: 11
    }
  }, onProgressDrag && _react["default"].createElement(ProgressControlThumb, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 118,
      columnNumber: 32
    }
  }))));
}, function (prevProps, nextProps) {
  if (prevProps.duration === nextProps.duration && prevProps.progress === nextProps.progress) return true;else return false;
});
exports.ProgressControl = ProgressControl;
//# sourceMappingURL=ProgressControl.js.map
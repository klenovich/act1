{"version":3,"names":["_constants","require","_schema","_createCreateTableQuery","sqlite","QuickSQLite","e","isRemoteDebuggerError","Error","message","includes","QuickSqliteClient","_createClass2","_classCallCheck2","exports","dbVersion","dbName","DB_NAME","dbLocation","DB_LOCATION","getDbVersion","setDbVersion","version","openDB","open","execute","console","error","closeDB","close","executeSqlBatch","queries","length","executeBatch","executeSql","query","params","_sqlite$execute","rows","_array","dropTables","Object","keys","tables","map","table","deleteDatabase","initializeDatabase","undefined","getUserPragmaVersion","updateUserPragmaVersion","q","reduce","queriesSoFar","tableName","push","apply","_toConsumableArray2","createCreateTableQuery","_sqlite$execute2","result","user_version","resetDB"],"sources":["QuickSqliteClient.ts"],"sourcesContent":["/* eslint-disable no-underscore-dangle */\nimport type { QuickSQLite } from 'react-native-quick-sqlite';\nlet sqlite: typeof QuickSQLite;\n\ntry {\n  sqlite = require('react-native-quick-sqlite').QuickSQLite;\n} catch (e) {\n  // We want to throw the original error when remote debugger (e.g. Chrome) is enabled.\n  // QuickSQLite can only be used when synchronous method invocations (JSI) are possible.\n  // e.g on-device debugger (e.g. Flipper).\n  const isRemoteDebuggerError = e instanceof Error && e.message.includes('Failed to install');\n  if (isRemoteDebuggerError) {\n    throw e;\n  }\n  // Reaching here will mean that QuickSQLite is not installed for one of the reasons\n  // 1. Running on regular expo, where we don't support offline storage yet.\n  // 2. Offline support is disabled, in which case this library is not installed.\n}\n\nimport { DB_LOCATION, DB_NAME } from './constants';\nimport { tables } from './schema';\nimport { createCreateTableQuery } from './sqlite-utils/createCreateTableQuery';\nimport type { PreparedQueries, Table } from './types';\n\n/**\n * QuickSqliteClient takes care of any direct interaction with sqlite.\n * This way usage react-native-quick-sqlite package is scoped to a single class/file.\n *\n */\nexport class QuickSqliteClient {\n  static dbVersion = 3;\n\n  static dbName = DB_NAME;\n  static dbLocation = DB_LOCATION;\n\n  static getDbVersion = () => QuickSqliteClient.dbVersion;\n  // Force a specific db version. This is mainly useful for testsuit.\n  static setDbVersion = (version: number) => (QuickSqliteClient.dbVersion = version);\n\n  static openDB = () => {\n    try {\n      sqlite.open(QuickSqliteClient.dbName, QuickSqliteClient.dbLocation);\n      sqlite.execute(QuickSqliteClient.dbName, `PRAGMA foreign_keys = ON`, []);\n    } catch (e) {\n      console.error(`Error opening database ${QuickSqliteClient.dbName}: ${e}`);\n    }\n  };\n\n  static closeDB = () => {\n    try {\n      sqlite.close(QuickSqliteClient.dbName);\n    } catch (e) {\n      console.error(`Error closing database ${QuickSqliteClient.dbName}: ${e}`);\n    }\n  };\n\n  static executeSqlBatch = (queries: PreparedQueries[]) => {\n    if (!queries || !queries.length) return;\n\n    QuickSqliteClient.openDB();\n    try {\n      sqlite.executeBatch(DB_NAME, queries);\n\n      QuickSqliteClient.closeDB();\n    } catch (e) {\n      QuickSqliteClient.closeDB();\n      throw new Error(`Query/queries failed: ${e}`);\n    }\n  };\n\n  static executeSql = (query: string, params?: string[]) => {\n    try {\n      QuickSqliteClient.openDB();\n      const { rows } = sqlite.execute(DB_NAME, query, params);\n      QuickSqliteClient.closeDB();\n\n      return rows ? rows._array : [];\n    } catch (e) {\n      QuickSqliteClient.closeDB();\n      throw new Error(`Query/queries failed: ${e}: `);\n    }\n  };\n\n  static dropTables = () => {\n    const queries: PreparedQueries[] = Object.keys(tables).map((table) => [\n      `DROP TABLE IF EXISTS ${table}`,\n      [],\n    ]);\n\n    QuickSqliteClient.executeSqlBatch(queries);\n  };\n\n  static deleteDatabase = () => {\n    try {\n      sqlite.delete(QuickSqliteClient.dbName, QuickSqliteClient.dbLocation);\n    } catch (e) {\n      throw new Error(`Error deleting DB: ${e}`);\n    }\n\n    return true;\n  };\n\n  static initializeDatabase = () => {\n    if (sqlite === undefined) {\n      throw new Error(\n        'Please install \"react-native-quick-sqlite\" package to enable offline support',\n      );\n    }\n\n    const version = QuickSqliteClient.getUserPragmaVersion();\n\n    if (version !== QuickSqliteClient.dbVersion) {\n      QuickSqliteClient.dropTables();\n      QuickSqliteClient.updateUserPragmaVersion(QuickSqliteClient.dbVersion);\n    }\n    const q = (Object.keys(tables) as Table[]).reduce<PreparedQueries[]>(\n      (queriesSoFar, tableName) => {\n        queriesSoFar.push(...createCreateTableQuery(tableName));\n        return queriesSoFar;\n      },\n      [],\n    );\n\n    QuickSqliteClient.executeSqlBatch(q);\n  };\n\n  static updateUserPragmaVersion = (version: number) => {\n    QuickSqliteClient.openDB();\n    sqlite.execute(DB_NAME, `PRAGMA user_version = ${version}`, []);\n    QuickSqliteClient.closeDB();\n  };\n\n  static getUserPragmaVersion = () => {\n    QuickSqliteClient.openDB();\n    try {\n      const { rows } = sqlite.execute(DB_NAME, `PRAGMA user_version`, []);\n      const result = rows ? rows._array : [];\n      QuickSqliteClient.closeDB();\n      return result[0].user_version as number;\n    } catch (e) {\n      QuickSqliteClient.closeDB();\n      throw new Error(`Querying for user_version failed: ${e}`);\n    }\n  };\n\n  static resetDB = () => {\n    QuickSqliteClient.dropTables();\n    QuickSqliteClient.initializeDatabase();\n  };\n}\n"],"mappings":"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"}
{"version":3,"names":["_mapMessageToStorable","require","_mapReactionToStorable","_mapUserToStorable","_QuickSqliteClient","_createUpsertQuery","upsertMessages","_ref","_ref$flush","flush","messages","usersToUpsert","messagesToUpsert","reactionsToUpsert","forEach","message","push","createUpsertQuery","mapMessageToStorable","user","mapUserToStorable","concat","_toConsumableArray2","latest_reactions","own_reactions","r","mapReactionToStorable","finalQueries","QuickSqliteClient","executeSqlBatch","exports"],"sources":["upsertMessages.ts"],"sourcesContent":["import type { MessageResponse } from 'stream-chat';\n\nimport { mapMessageToStorable } from '../mappers/mapMessageToStorable';\nimport { mapReactionToStorable } from '../mappers/mapReactionToStorable';\nimport { mapUserToStorable } from '../mappers/mapUserToStorable';\nimport { QuickSqliteClient } from '../QuickSqliteClient';\nimport { createUpsertQuery } from '../sqlite-utils/createUpsertQuery';\nimport type { PreparedQueries } from '../types';\n\nexport const upsertMessages = ({\n  flush = true,\n  messages,\n}: {\n  messages: MessageResponse[];\n  flush?: boolean;\n}) => {\n  const usersToUpsert: PreparedQueries[] = [];\n  const messagesToUpsert: PreparedQueries[] = [];\n  const reactionsToUpsert: PreparedQueries[] = [];\n\n  messages?.forEach((message: MessageResponse) => {\n    messagesToUpsert.push(createUpsertQuery('messages', mapMessageToStorable(message)));\n    if (message.user) {\n      usersToUpsert.push(createUpsertQuery('users', mapUserToStorable(message.user)));\n    }\n\n    [...(message.latest_reactions || []), ...(message.own_reactions || [])].forEach((r) => {\n      if (r.user) {\n        usersToUpsert.push(createUpsertQuery('users', mapUserToStorable(r.user)));\n      }\n\n      reactionsToUpsert.push(createUpsertQuery('reactions', mapReactionToStorable(r)));\n    });\n  });\n\n  const finalQueries = [...messagesToUpsert, ...reactionsToUpsert, ...usersToUpsert];\n\n  if (flush) {\n    QuickSqliteClient.executeSqlBatch(finalQueries);\n  }\n\n  return finalQueries;\n};\n"],"mappings":";;;;;;AAEA,IAAAA,qBAAA,GAAAC,OAAA;AACA,IAAAC,sBAAA,GAAAD,OAAA;AACA,IAAAE,kBAAA,GAAAF,OAAA;AACA,IAAAG,kBAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AAGO,IAAMK,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAMrB;EAAA,IAAAC,UAAA,GAAAD,IAAA,CALJE,KAAK;IAALA,KAAK,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;IACZE,QAAQ,GAAAH,IAAA,CAARG,QAAQ;EAKR,IAAMC,aAAgC,GAAG,EAAE;EAC3C,IAAMC,gBAAmC,GAAG,EAAE;EAC9C,IAAMC,iBAAoC,GAAG,EAAE;EAE/CH,QAAQ,oBAARA,QAAQ,CAAEI,OAAO,CAAC,UAACC,OAAwB,EAAK;IAC9CH,gBAAgB,CAACI,IAAI,CAAC,IAAAC,oCAAiB,EAAC,UAAU,EAAE,IAAAC,0CAAoB,EAACH,OAAO,CAAC,CAAC,CAAC;IACnF,IAAIA,OAAO,CAACI,IAAI,EAAE;MAChBR,aAAa,CAACK,IAAI,CAAC,IAAAC,oCAAiB,EAAC,OAAO,EAAE,IAAAG,oCAAiB,EAACL,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;IACjF;IAEA,GAAAE,MAAA,KAAAC,mBAAA,aAAKP,OAAO,CAACQ,gBAAgB,IAAI,EAAE,OAAAD,mBAAA,aAAOP,OAAO,CAACS,aAAa,IAAI,EAAE,GAAGV,OAAO,CAAC,UAACW,CAAC,EAAK;MACrF,IAAIA,CAAC,CAACN,IAAI,EAAE;QACVR,aAAa,CAACK,IAAI,CAAC,IAAAC,oCAAiB,EAAC,OAAO,EAAE,IAAAG,oCAAiB,EAACK,CAAC,CAACN,IAAI,CAAC,CAAC,CAAC;MAC3E;MAEAN,iBAAiB,CAACG,IAAI,CAAC,IAAAC,oCAAiB,EAAC,WAAW,EAAE,IAAAS,4CAAqB,EAACD,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,IAAME,YAAY,MAAAN,MAAA,CAAOT,gBAAgB,EAAKC,iBAAiB,EAAKF,aAAa,CAAC;EAElF,IAAIF,KAAK,EAAE;IACTmB,oCAAiB,CAACC,eAAe,CAACF,YAAY,CAAC;EACjD;EAEA,OAAOA,YAAY;AACrB,CAAC;AAACG,OAAA,CAAAxB,cAAA,GAAAA,cAAA"}
{"version":3,"names":["_dayjs","_interopRequireDefault","require","_handleEventToSyncDB","_apis","_addPendingTask","_deletePendingTask","_getPendingTasks","_QuickSqliteClient","_createForOfIteratorHelperLoose","o","allowArrayLike","it","Symbol","iterator","call","next","bind","Array","isArray","_unsupportedIterableToArray","length","i","done","value","TypeError","minLen","_arrayLikeToArray","n","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","restBeforeNextTask","Promise","resolve","setTimeout","DBSyncManager","_createClass2","_classCallCheck2","exports","syncStatus","listeners","client","getSyncStatus","init","_ref","_asyncToGenerator2","_regenerator","mark","_callee2","_client$user","_client$wsConnection","wrap","_callee2$","_context2","prev","user","id","wsConnection","isHealthy","syncAndExecutePendingTasks","forEach","l","on","_ref2","_callee","event","_callee$","_context","online","stop","_x2","apply","arguments","_x","onSyncStatusChange","listener","push","unsubscribe","filter","el","sync","_callee3","_DBSyncManager$client","cids","lastSyncedAt","lastSyncedAtDate","lastSyncedAtDayJs","nowDayJs","diff","result","queries","_callee3$","_context3","abrupt","getAllChannelIds","getLastSyncedAt","currentUserId","Date","dayjs","QuickSqliteClient","resetDB","toISOString","sent","events","reduce","concat","handleEventToSyncDB","executeSqlBatch","t0","upsertUserSyncStatus","_callee4","_callee4$","_context4","executePendingTasks","queueTask","_ref6","_callee5","_ref5","task","removeFromApi","response","_response","_response$data","_callee5$","_context5","addPendingTask","executeTask","data","code","_x3","_ref8","_callee6","_ref7","channel","_callee6$","_context6","channelType","channelId","type","sendReaction","_toConsumableArray2","payload","deleteReaction","deleteMessage","Error","_x4","_ref9","_callee7","queue","_iterator","_step","_response2","_response2$data","_callee7$","_context7","getPendingTasks","deletePendingTask","_x5","dropPendingTasks","conditions","tasks","_iterator2","_step2"],"sources":["DBSyncManager.ts"],"sourcesContent":["import type { AxiosError } from 'axios';\nimport dayjs from 'dayjs';\nimport type { APIErrorResponse, StreamChat } from 'stream-chat';\n\nimport { handleEventToSyncDB } from '../components/Chat/hooks/handleEventToSyncDB';\nimport { getAllChannelIds, getLastSyncedAt, upsertUserSyncStatus } from '../store/apis';\n\nimport { addPendingTask } from '../store/apis/addPendingTask';\n\nimport { deletePendingTask } from '../store/apis/deletePendingTask';\nimport { getPendingTasks } from '../store/apis/getPendingTasks';\nimport { QuickSqliteClient } from '../store/QuickSqliteClient';\nimport type { PendingTask, PreparedQueries } from '../store/types';\nimport type { DefaultStreamChatGenerics } from '../types/types';\n\n/**\n * DBSyncManager has the responsibility to sync the channel states\n * within local database whenever possible.\n *\n * Components can get the current sync status using DBSyncManager.getCurrentStatus().\n * Or components can attach a listener for status change as following:\n *\n * ```tsx\n * useEffect(() => {\n *  const unsubscribe = DBSyncManager.onSyncStatusChange((syncStatus) => {\n *    if (syncStatus) {\n *      doSomething();\n *    }\n *  })\n *\n *  return () => unsubscribe();\n * })\n * ```\n */\nconst restBeforeNextTask = () => new Promise((resolve) => setTimeout(resolve, 500));\n\nexport class DBSyncManager {\n  static syncStatus = false;\n  static listeners: Array<(status: boolean) => void> = [];\n  static client: StreamChat | null = null;\n\n  /**\n   * Returns weather channel states in local DB are synced with backend or not.\n   * @returns boolean\n   */\n  static getSyncStatus = () => this.syncStatus;\n\n  /**\n   * Initializes the DBSyncManager. This function should be called only once\n   * throughout the lifetime of SDK.\n   *\n   * @param client\n   */\n  static init = async (client: StreamChat) => {\n    this.client = client;\n    // If the websocket connection is already active, then straightaway\n    // call the sync api and also execute pending api calls.\n    // Otherwise wait for `connection.changed` event.\n    if (client.user?.id && client.wsConnection?.isHealthy) {\n      await this.syncAndExecutePendingTasks();\n      this.syncStatus = true;\n      this.listeners.forEach((l) => l(true));\n    }\n\n    this.client.on('connection.changed', async (event) => {\n      if (event.online) {\n        await this.syncAndExecutePendingTasks();\n        this.syncStatus = true;\n        this.listeners.forEach((l) => l(true));\n      } else {\n        this.syncStatus = false;\n        this.listeners.forEach((l) => l(false));\n      }\n    });\n  };\n\n  /**\n   * Subscribes a listener for sync status change.\n   *\n   * @param listener {function}\n   * @returns {function} to unsubscribe the listener.\n   */\n  static onSyncStatusChange = (listener: (status: boolean) => void) => {\n    this.listeners.push(listener);\n\n    return {\n      unsubscribe: () => {\n        this.listeners = this.listeners.filter((el) => el !== listener);\n      },\n    };\n  };\n\n  static sync = async () => {\n    if (!this.client?.user) return;\n    const cids = getAllChannelIds();\n    // If there are no channels, then there is no need to sync.\n    if (cids.length === 0) return;\n\n    const lastSyncedAt = getLastSyncedAt({\n      currentUserId: this.client.user.id,\n    });\n\n    if (lastSyncedAt) {\n      const lastSyncedAtDate = new Date(lastSyncedAt);\n      const lastSyncedAtDayJs = dayjs(lastSyncedAtDate);\n      const nowDayJs = dayjs();\n      const diff = nowDayJs.diff(lastSyncedAtDayJs, 'days');\n      if (diff > 30) {\n        // stream backend will send an error if we try to sync after 30 days.\n        // In that case reset the entire DB and start fresh.\n        QuickSqliteClient.resetDB();\n      } else {\n        try {\n          const result = await this.client.sync(cids, lastSyncedAtDate.toISOString());\n          const queries = result.events.reduce<PreparedQueries[]>((queries, event) => {\n            queries = queries.concat(handleEventToSyncDB(event, false));\n            return queries;\n          }, []);\n\n          if (queries.length) {\n            QuickSqliteClient.executeSqlBatch(queries);\n          }\n        } catch (e) {\n          // Error will be raised by the sync API if there are too many events.\n          // In that case reset the entire DB and start fresh.\n          QuickSqliteClient.resetDB();\n        }\n      }\n    }\n    upsertUserSyncStatus({\n      currentUserId: this.client.user.id,\n      lastSyncedAt: new Date().toString(),\n    });\n  };\n\n  static syncAndExecutePendingTasks = async () => {\n    if (!this.client) return;\n\n    await this.executePendingTasks(this.client);\n    await this.sync();\n  };\n\n  static queueTask = async <\n    StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n  >({\n    client,\n    task,\n  }: {\n    client: StreamChat<StreamChatGenerics>;\n    task: PendingTask;\n  }) => {\n    const removeFromApi = addPendingTask(task);\n\n    let response;\n    try {\n      response = await this.executeTask<StreamChatGenerics>({ client, task });\n    } catch (e) {\n      if ((e as AxiosError<APIErrorResponse>)?.response?.data?.code === 4) {\n        // Error code 16 - message already exists\n        // ignore\n      } else {\n        throw e;\n      }\n    }\n\n    removeFromApi();\n\n    return response;\n  };\n\n  static executeTask = async <\n    StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n  >({\n    client,\n    task,\n  }: {\n    client: StreamChat<StreamChatGenerics>;\n    task: PendingTask;\n  }) => {\n    const channel = client.channel(task.channelType, task.channelId);\n\n    if (task.type === 'send-reaction') {\n      return await channel.sendReaction(...task.payload);\n    }\n\n    if (task.type === 'delete-reaction') {\n      return await channel.deleteReaction(...task.payload);\n    }\n\n    if (task.type === 'delete-message') {\n      return await client.deleteMessage(...task.payload);\n    }\n\n    throw new Error('Invalid task type');\n  };\n\n  static executePendingTasks = async <\n    StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n  >(\n    client: StreamChat<StreamChatGenerics>,\n  ) => {\n    const queue = getPendingTasks();\n    for (const task of queue) {\n      if (!task.id) continue;\n\n      try {\n        await this.executeTask<StreamChatGenerics>({\n          client,\n          task,\n        });\n      } catch (e) {\n        if ((e as AxiosError<APIErrorResponse>)?.response?.data?.code === 4) {\n          // Error code 16 - message already exists\n          // ignore\n        } else {\n          throw e;\n        }\n      }\n\n      deletePendingTask({\n        id: task.id,\n      });\n      await restBeforeNextTask();\n    }\n  };\n\n  static dropPendingTasks = (conditions: { messageId: string }) => {\n    const tasks = getPendingTasks(conditions);\n\n    for (const task of tasks) {\n      if (!task.id) continue;\n\n      deletePendingTask({\n        id: task.id,\n      });\n    }\n  };\n}\n"],"mappings":"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"}
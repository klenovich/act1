{"version":3,"names":["_betterSqlite","_interopRequireDefault","require","db","exports","sqliteMock","close","message","status","execute","dbName","queryInput","params","query","trim","toLowerCase","stmt","prepare","result","indexOf","modifiedParams","map","p","Number","all","rows","_array","pragmaQueryTokens","split","pragma","run","executeBatch","queriesArr","forEach","queryAndParams","staus","open","Sqlite3"],"sources":["mock.ts"],"sourcesContent":["import Sqlite3 from 'better-sqlite3';\n\nimport type { PreparedQueries } from '../../store/types';\n\nexport let db: Sqlite3.Database;\n\nexport const sqliteMock = {\n  close: () => {\n    db.close();\n    return {\n      message: '',\n      status: 0,\n    };\n  },\n  execute: (dbName: string, queryInput: string, params: unknown[]) => {\n    const query = queryInput.trim().toLowerCase();\n    const stmt = db.prepare(query);\n    let result: unknown[] = [];\n\n    if (query.indexOf('select') === 0) {\n      if (params) {\n        const modifiedParams = params.map((p) => {\n          if (typeof p == 'boolean') {\n            return Number(p);\n          } else {\n            return p;\n          }\n        });\n        result = stmt.all(modifiedParams);\n      } else {\n        result = stmt.all();\n      }\n\n      return {\n        message: '',\n        rows: {\n          _array: result,\n        },\n        status: 0,\n      };\n    }\n\n    if (query.indexOf('pragma') === 0) {\n      const pragmaQueryTokens = query.split(' ');\n      if (pragmaQueryTokens[2] === '=') {\n        db.pragma(`${pragmaQueryTokens[1]} = ${pragmaQueryTokens[3]}`);\n      } else {\n        result = db.pragma(`${pragmaQueryTokens[1]}`);\n      }\n\n      return {\n        message: '',\n        rows: {\n          _array: result,\n        },\n        status: 0,\n      };\n    }\n\n    // insert or create table query\n    if (params) {\n      stmt.run(params);\n    } else {\n      stmt.run();\n    }\n\n    return {\n      message: '',\n      rows: {\n        _array: result,\n      },\n      status: 0,\n    };\n  },\n  executeBatch: (dbName: string, queriesArr: PreparedQueries[]) => {\n    queriesArr.forEach((queryAndParams) => {\n      const query = queryAndParams[0];\n      const params = queryAndParams[1];\n      const stmt = db.prepare(query);\n      if (params) {\n        const modifiedParams = params.map((p) => {\n          if (typeof p == 'boolean') {\n            return Number(p);\n          } else {\n            return p;\n          }\n        });\n\n        stmt.run(modifiedParams);\n      } else {\n        stmt.run();\n      }\n    });\n\n    return {\n      message: '',\n      staus: 0,\n    };\n  },\n  open: () => {\n    db = new Sqlite3('foobar.db');\n    return {\n      message: '',\n      status: 0,\n    };\n  },\n};\n"],"mappings":"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"}
{"version":3,"names":["_react","_interopRequireWildcard","require","_useResettableState","_defaultBaseContextValue","_getDisplayName","_isTestEnvironment","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","MessageOverlayContext","React","createContext","DEFAULT_BASE_CONTEXT_VALUE","exports","MessageOverlayProvider","_ref","children","value","messageOverlayContext","useResettableState","createElement","Provider","__self","__source","fileName","lineNumber","columnNumber","useMessageOverlayContext","contextValue","useContext","isTestEnvironment","Error","withMessageOverlayContext","Component","WithMessageOverlayContextComponent","props","messageContext","_extends2","displayName","getDisplayName"],"sources":["MessageOverlayContext.tsx"],"sourcesContent":["import React, { PropsWithChildren, useContext } from 'react';\n\nimport type { ImageProps } from 'react-native';\n\nimport type { Attachment, TranslationLanguages } from 'stream-chat';\n\nimport { useResettableState } from './hooks/useResettableState';\n\nimport type { GroupType, MessageType } from '../../components/MessageList/hooks/useMessageList';\nimport type { MessageActionListProps } from '../../components/MessageOverlay/MessageActionList';\nimport type {\n  MessageActionListItemProps,\n  MessageActionType,\n} from '../../components/MessageOverlay/MessageActionListItem';\nimport type { OverlayReactionListProps } from '../../components/MessageOverlay/OverlayReactionList';\nimport type { OverlayReactionsProps } from '../../components/MessageOverlay/OverlayReactions';\nimport type { OverlayReactionsAvatarProps } from '../../components/MessageOverlay/OverlayReactionsAvatar';\nimport type { DefaultStreamChatGenerics, UnknownType } from '../../types/types';\nimport type { ReactionData } from '../../utils/utils';\nimport type { ChatContextValue } from '../chatContext/ChatContext';\nimport type { Alignment, MessageContextValue } from '../messageContext/MessageContext';\nimport type { MessagesContextValue } from '../messagesContext/MessagesContext';\nimport type { OwnCapabilitiesContextValue } from '../ownCapabilitiesContext/OwnCapabilitiesContext';\nimport { DEFAULT_BASE_CONTEXT_VALUE } from '../utils/defaultBaseContextValue';\n\nimport { getDisplayName } from '../utils/getDisplayName';\nimport { isTestEnvironment } from '../utils/isTestEnvironment';\n\nexport type MessageOverlayData<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  alignment?: Alignment;\n  chatContext?: ChatContextValue<StreamChatGenerics>;\n  clientId?: string;\n  files?: Attachment<StreamChatGenerics>[];\n  groupStyles?: GroupType[];\n  handleReaction?: (reactionType: string) => Promise<void>;\n  ImageComponent?: React.ComponentType<ImageProps>;\n  images?: Attachment<StreamChatGenerics>[];\n  message?: MessageType<StreamChatGenerics>;\n  messageActions?: MessageActionType[];\n  messageContext?: MessageContextValue<StreamChatGenerics>;\n  messageReactionTitle?: string;\n  messagesContext?: MessagesContextValue<StreamChatGenerics>;\n  onlyEmojis?: boolean;\n  otherAttachments?: Attachment<StreamChatGenerics>[];\n  OverlayReactionList?: React.ComponentType<OverlayReactionListProps<StreamChatGenerics>>;\n  ownCapabilities?: OwnCapabilitiesContextValue;\n  supportedReactions?: ReactionData[];\n  threadList?: boolean;\n  userLanguage?: TranslationLanguages;\n  videos?: Attachment<StreamChatGenerics>[];\n};\n\nexport type MessageOverlayContextValue<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = {\n  /**\n   * Custom UI component for rendering [message actions](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/2.png) in overlay.\n   *\n   * **Default** [MessageActionList](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageOverlay/MessageActions.tsx)\n   */\n  MessageActionList: React.ComponentType<MessageActionListProps<StreamChatGenerics>>;\n  MessageActionListItem: React.ComponentType<MessageActionListItemProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component for rendering [reaction selector](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/2.png) in overlay (which shows up on long press on message).\n   *\n   * **Default** [OverlayReactionList](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageOverlay/OverlayReactionList.tsx)\n   */\n  OverlayReactionList: React.ComponentType<OverlayReactionListProps<StreamChatGenerics>>;\n  /**\n   * Custom UI component for rendering [reactions list](https://github.com/GetStream/stream-chat-react-native/blob/main/screenshots/docs/2.png), in overlay (which shows up on long press on message).\n   *\n   * **Default** [OverlayReactions](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/components/MessageOverlay/OverlayReactions.tsx)\n   */\n  OverlayReactions: React.ComponentType<OverlayReactionsProps<StreamChatGenerics>>;\n  OverlayReactionsAvatar: React.ComponentType<OverlayReactionsAvatarProps>;\n  reset: () => void;\n  setData: React.Dispatch<React.SetStateAction<MessageOverlayData<StreamChatGenerics>>>;\n  data?: MessageOverlayData<StreamChatGenerics>;\n};\n\nexport const MessageOverlayContext = React.createContext(\n  DEFAULT_BASE_CONTEXT_VALUE as MessageOverlayContextValue,\n);\n\nexport const MessageOverlayProvider = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  children,\n  value,\n}: PropsWithChildren<{\n  value?: MessageOverlayContextValue<StreamChatGenerics>;\n}>) => {\n  const messageOverlayContext = useResettableState(value);\n  return (\n    <MessageOverlayContext.Provider\n      value={messageOverlayContext as unknown as MessageOverlayContextValue}\n    >\n      {children}\n    </MessageOverlayContext.Provider>\n  );\n};\n\nexport const useMessageOverlayContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>() => {\n  const contextValue = useContext(\n    MessageOverlayContext,\n  ) as unknown as MessageOverlayContextValue<StreamChatGenerics>;\n\n  if (contextValue === DEFAULT_BASE_CONTEXT_VALUE && !isTestEnvironment()) {\n    throw new Error(\n      `The useMessageOverlayContext hook was called outside the MessageOverlayContext Provider. Make sure you have configured OverlayProvider component correctly - https://getstream.io/chat/docs/sdk/reactnative/basics/hello_stream_chat/#overlay-provider`,\n    );\n  }\n\n  return contextValue;\n};\n\n/**\n * Typescript currently does not support partial inference so if MessageOverlayContext\n * typing is desired while using the HOC withMessageOverlayContextContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withMessageOverlayContext = <\n  P extends UnknownType,\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  Component: React.ComponentType<P>,\n): React.FC<Omit<P, keyof MessageOverlayContextValue<StreamChatGenerics>>> => {\n  const WithMessageOverlayContextComponent = (\n    props: Omit<P, keyof MessageOverlayContextValue<StreamChatGenerics>>,\n  ) => {\n    const messageContext = useMessageOverlayContext<StreamChatGenerics>();\n\n    return <Component {...(props as P)} {...messageContext} />;\n  };\n  WithMessageOverlayContextComponent.displayName = `WithMessageOverlayContext${getDisplayName(\n    Component,\n  )}`;\n  return WithMessageOverlayContextComponent;\n};\n"],"mappings":"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"}
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNative2 = require("@testing-library/react-native");
var _useResettableState2 = require("./useResettableState");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/contexts/messageOverlayContext/hooks/useResettableState.test.tsx";
var TestComponent = function TestComponent() {
  var _useResettableState = (0, _useResettableState2.useResettableState)(0),
    data = _useResettableState.data,
    reset = _useResettableState.reset,
    setData = _useResettableState.setData;
  return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_reactNative.Text, {
    testID: "value",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 14,
      columnNumber: 7
    }
  }, "" + data), _react["default"].createElement(_reactNative.Button, {
    onPress: function onPress() {
      setData(data + 1);
    },
    testID: "increment",
    title: "Super useful incrementer",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15,
      columnNumber: 7
    }
  }), _react["default"].createElement(_reactNative.Button, {
    onPress: function onPress() {
      reset();
    },
    testID: "reset",
    title: "Oh no, go back!",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 22,
      columnNumber: 7
    }
  }));
};
var waitForOptions = {
  timeout: 1000
};
test('useResettableState can be reset to its initial state', (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
  var _render, getByTestId;
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        _render = (0, _reactNative2.render)(_react["default"].createElement(TestComponent, {
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 38,
            columnNumber: 34
          }
        })), getByTestId = _render.getByTestId;
        _context.next = 3;
        return (0, _reactNative2.waitFor)(function () {
          return expect(getByTestId('value').children[0]).toBe('0');
        }, waitForOptions);
      case 3:
        _reactNative2.fireEvent.press(getByTestId('increment'));
        _context.next = 6;
        return (0, _reactNative2.waitFor)(function () {
          return expect(getByTestId('value').children[0]).toBe('1');
        }, waitForOptions);
      case 6:
        _reactNative2.fireEvent.press(getByTestId('reset'));
        _context.next = 9;
        return (0, _reactNative2.waitFor)(function () {
          return expect(getByTestId('value').children[0]).toBe('0');
        }, waitForOptions);
      case 9:
      case "end":
        return _context.stop();
    }
  }, _callee);
})));
//# sourceMappingURL=useResettableState.test.js.map
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDebugContext = exports.DebugContextProvider = exports.DebugContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _defaultBaseContextValue = require("../utils/defaultBaseContextValue");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/contexts/debugContext/DebugContext.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var DebugContext = _react["default"].createContext(_defaultBaseContextValue.DEFAULT_BASE_CONTEXT_VALUE);
exports.DebugContext = DebugContext;
var DebugContextProvider = function DebugContextProvider(_ref) {
  var children = _ref.children,
    useFlipper = _ref.useFlipper;
  var debugRef = (0, _react.useRef)({
    eventType: undefined,
    sendEventParams: undefined
  });
  var _useFlipper = useFlipper(),
    updateData = _useFlipper.updateData;
  var ref = (0, _react.useRef)({
    setEventType: function setEventType(data) {
      debugRef.current.eventType = data;
      updateData(debugRef);
    },
    setSendEventParams: function setSendEventParams(data) {
      debugRef.current.sendEventParams = data;
      updateData(debugRef);
    }
  });
  return _react["default"].createElement(DebugContext.Provider, {
    value: ref,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 65,
      columnNumber: 5
    }
  }, children);
};
exports.DebugContextProvider = DebugContextProvider;
var useDebugContext = function useDebugContext() {
  var contextValue = (0, _react.useContext)(DebugContext);
  return contextValue;
};
exports.useDebugContext = useDebugContext;
//# sourceMappingURL=DebugContext.js.map
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedGalleryVideo = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _native = require("../../../native");
var _utils = require("../../../utils/utils");
var _Spinner = require("../../Spinner/Spinner");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/ImageGallery/components/AnimatedGalleryVideo.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var screenWidth = (0, _utils.vw)(100);
var halfScreenWidth = (0, _utils.vw)(50);
var oneEighth = 1 / 8;
var styles = _reactNative.StyleSheet.create({
  activityIndicator: {
    alignSelf: 'center'
  },
  videoPlayer: {
    height: '100%',
    width: '100%'
  }
});
var AnimatedGalleryVideo = _react["default"].memo(function (props) {
  var _useState = (0, _react.useState)(1),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    opacity = _useState2[0],
    setOpacity = _useState2[1];
  var attachmentId = props.attachmentId,
    handleEnd = props.handleEnd,
    handleLoad = props.handleLoad,
    handleProgress = props.handleProgress,
    index = props.index,
    offsetScale = props.offsetScale,
    paused = props.paused,
    previous = props.previous,
    repeat = props.repeat,
    scale = props.scale,
    screenHeight = props.screenHeight,
    selected = props.selected,
    shouldRender = props.shouldRender,
    source = props.source,
    style = props.style,
    translateX = props.translateX,
    translateY = props.translateY,
    videoRef = props.videoRef;
  var onLoadStart = function onLoadStart() {
    setOpacity(1);
  };
  var onLoad = function onLoad(payload) {
    setOpacity(0);
    handleLoad(attachmentId, payload.duration);
  };
  var onEnd = function onEnd() {
    handleEnd();
  };
  var onProgress = function onProgress(data) {
    handleProgress(attachmentId, data.currentTime / data.seekableDuration);
  };
  var onBuffer = function onBuffer(_ref) {
    var isBuffering = _ref.isBuffering;
    if (isBuffering) setOpacity(1);else setOpacity(0);
  };
  var onPlayBackStatusUpdate = function onPlayBackStatusUpdate(playbackStatus) {
    if (!playbackStatus.isLoaded) {
      setOpacity(1);
      if (playbackStatus.error) {
        console.error("Encountered a fatal error during playback: " + playbackStatus.error);
      }
    } else {
      setOpacity(0);
      handleLoad(attachmentId, playbackStatus.durationMillis / 1000);
      if (playbackStatus.isPlaying) {
        handleProgress(attachmentId, playbackStatus.positionMillis / 1000 / (playbackStatus.durationMillis / 1000));
      }
      if (playbackStatus.isBuffering) {
        setOpacity(1);
      }
      if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
        handleEnd();
      }
    }
  };
  var animatedViewStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
    var xScaleOffset = -7 * screenWidth * (0.5 + index);
    var yScaleOffset = -screenHeight * 3.5;
    return {
      transform: [{
        translateX: selected ? translateX.value + xScaleOffset : scale.value < 1 || scale.value !== offsetScale.value ? xScaleOffset : previous ? translateX.value - halfScreenWidth * (scale.value - 1) + xScaleOffset : translateX.value + halfScreenWidth * (scale.value - 1) + xScaleOffset
      }, {
        translateY: selected ? translateY.value + yScaleOffset : yScaleOffset
      }, {
        scale: selected ? scale.value / 8 : oneEighth
      }, {
        scaleX: -1
      }]
    };
  }, [previous, selected]);
  if (!shouldRender) {
    return _react["default"].createElement(_reactNative.View, {
      accessibilityLabel: "Empty View Image Gallery",
      style: [style, {
        transform: [{
          scale: oneEighth
        }]
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 163,
        columnNumber: 9
      }
    });
  }
  return _react["default"].createElement(_reactNativeReanimated["default"].View, {
    accessibilityLabel: "Image Gallery Video",
    style: [style, animatedViewStyles, {
      transform: [{
        scaleX: -1
      }, {
        translateY: -screenHeight * 3.5
      }, {
        translateX: -translateX.value + 7 * screenWidth * (0.5 + index)
      }, {
        scale: oneEighth
      }]
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 7
    }
  }, (0, _native.isVideoPackageAvailable)() && _react["default"].createElement(_native.Video, {
    onBuffer: onBuffer,
    onEnd: onEnd,
    onLoad: onLoad,
    onLoadStart: onLoadStart,
    onPlaybackStatusUpdate: onPlayBackStatusUpdate,
    onProgress: onProgress,
    paused: paused,
    repeat: repeat,
    resizeMode: "contain",
    style: style,
    testID: "video-player",
    uri: source.uri,
    videoRef: videoRef,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 189,
      columnNumber: 11
    }
  }), _react["default"].createElement(_reactNativeReanimated["default"].View, {
    accessibilityLabel: "Spinner",
    style: [styles.activityIndicator, {
      opacity: opacity,
      transform: [{
        scaleX: -1
      }, {
        translateY: -screenHeight * 4
      }, {
        scale: 1 / oneEighth
      }]
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205,
      columnNumber: 9
    }
  }, _react["default"].createElement(_Spinner.Spinner, {
    height: 40,
    width: 40,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 219,
      columnNumber: 11
    }
  })));
}, function (prevProps, nextProps) {
  if (prevProps.paused === nextProps.paused && prevProps.repeat === nextProps.repeat && prevProps.shouldRender === nextProps.shouldRender && prevProps.source.uri === nextProps.source.uri && prevProps.screenHeight === nextProps.screenHeight && prevProps.selected === nextProps.selected && prevProps.previous === nextProps.previous && prevProps.index === nextProps.index) {
    return true;
  }
  return false;
});
exports.AnimatedGalleryVideo = AnimatedGalleryVideo;
AnimatedGalleryVideo.displayName = 'AnimatedGalleryVideo';
//# sourceMappingURL=AnimatedGalleryVideo.js.map
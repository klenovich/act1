var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MessageList = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useMessageList = require("./hooks/useMessageList");
var _InlineLoadingMoreIndicator = require("./InlineLoadingMoreIndicator");
var _InlineLoadingMoreRecentIndicator = require("./InlineLoadingMoreRecentIndicator");
var _InlineLoadingMoreThreadIndicator = require("./InlineLoadingMoreThreadIndicator");
var _getLastReceivedMessage = require("./utils/getLastReceivedMessage");
var _AttachmentPickerContext = require("../../contexts/attachmentPickerContext/AttachmentPickerContext");
var _ChannelContext = require("../../contexts/channelContext/ChannelContext");
var _ChatContext = require("../../contexts/chatContext/ChatContext");
var _DebugContext = require("../../contexts/debugContext/DebugContext");
var _ImageGalleryContext = require("../../contexts/imageGalleryContext/ImageGalleryContext");
var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");
var _OverlayContext = require("../../contexts/overlayContext/OverlayContext");
var _PaginatedMessageListContext = require("../../contexts/paginatedMessageListContext/PaginatedMessageListContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _ThreadContext = require("../../contexts/threadContext/ThreadContext");
var _TranslationContext = require("../../contexts/translationContext/TranslationContext");
var _excluded = ["contentContainerStyle", "style"];
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/MessageList/MessageList.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var WAIT_FOR_SCROLL_TO_OFFSET_TIMEOUT = 150;
var MAX_RETRIES_AFTER_SCROLL_FAILURE = 10;
var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    flex: 1,
    width: '100%'
  },
  contentContainer: {
    flexGrow: 1,
    paddingBottom: 4
  },
  flex: {
    flex: 1
  },
  invert: {
    transform: [{
      scaleY: -1
    }]
  },
  invertAndroid: {
    transform: [{
      scaleX: -1
    }, {
      scaleY: -1
    }]
  },
  listContainer: {
    flex: 1,
    width: '100%'
  },
  stickyHeader: {
    position: 'absolute',
    top: 0
  }
});
var InvertedCellRendererComponent = function InvertedCellRendererComponent(props) {
  return _react["default"].createElement(_reactNative.View, (0, _extends2["default"])({}, props, {
    style: styles.invertAndroid,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 3
    }
  }));
};
var keyExtractor = function keyExtractor(item) {
  if (item.id) return item.id;
  if (item.created_at) return typeof item.created_at === 'string' ? item.created_at : item.created_at.toISOString();
  return Date.now().toString();
};
var flatListViewabilityConfig = {
  viewAreaCoveragePercentThreshold: 1
};
var MessageListWithContext = function MessageListWithContext(props) {
  var _getLastReceivedMessa;
  var LoadingMoreIndicator = props.threadList ? _InlineLoadingMoreThreadIndicator.InlineLoadingMoreThreadIndicator : _InlineLoadingMoreIndicator.InlineLoadingMoreIndicator;
  var additionalFlatListProps = props.additionalFlatListProps,
    channel = props.channel,
    client = props.client,
    closePicker = props.closePicker,
    DateHeader = props.DateHeader,
    disabled = props.disabled,
    disableTypingIndicator = props.disableTypingIndicator,
    EmptyStateIndicator = props.EmptyStateIndicator,
    FlatList = props.FlatList,
    _props$FooterComponen = props.FooterComponent,
    FooterComponent = _props$FooterComponen === void 0 ? LoadingMoreIndicator : _props$FooterComponen,
    hasNoMoreRecentMessagesToLoad = props.hasNoMoreRecentMessagesToLoad,
    _props$HeaderComponen = props.HeaderComponent,
    HeaderComponent = _props$HeaderComponen === void 0 ? _InlineLoadingMoreRecentIndicator.InlineLoadingMoreRecentIndicator : _props$HeaderComponen,
    hideStickyDateHeader = props.hideStickyDateHeader,
    initialScrollToFirstUnreadMessage = props.initialScrollToFirstUnreadMessage,
    InlineDateSeparator = props.InlineDateSeparator,
    InlineUnreadIndicator = props.InlineUnreadIndicator,
    _props$inverted = props.inverted,
    inverted = _props$inverted === void 0 ? true : _props$inverted,
    _props$isListActive = props.isListActive,
    isListActive = _props$isListActive === void 0 ? false : _props$isListActive,
    legacyImageViewerSwipeBehaviour = props.legacyImageViewerSwipeBehaviour,
    loadChannelAroundMessage = props.loadChannelAroundMessage,
    loading = props.loading,
    LoadingIndicator = props.LoadingIndicator,
    loadMore = props.loadMore,
    loadMoreRecent = props.loadMoreRecent,
    loadMoreThread = props.loadMoreThread,
    markRead = props.markRead,
    Message = props.Message,
    MessageSystem = props.MessageSystem,
    myMessageTheme = props.myMessageTheme,
    NetworkDownIndicator = props.NetworkDownIndicator,
    noGroupByUser = props.noGroupByUser,
    onListScroll = props.onListScroll,
    onThreadSelect = props.onThreadSelect,
    overlay = props.overlay,
    reloadChannel = props.reloadChannel,
    ScrollToBottomButton = props.ScrollToBottomButton,
    selectedPicker = props.selectedPicker,
    setFlatListRef = props.setFlatListRef,
    setMessages = props.setMessages,
    setSelectedPicker = props.setSelectedPicker,
    setTargetedMessage = props.setTargetedMessage,
    StickyHeader = props.StickyHeader,
    targetedMessage = props.targetedMessage,
    tDateTimeParser = props.tDateTimeParser,
    thread = props.thread,
    _props$threadList = props.threadList,
    threadList = _props$threadList === void 0 ? false : _props$threadList,
    TypingIndicator = props.TypingIndicator,
    TypingIndicatorContainer = props.TypingIndicatorContainer;
  var _useTheme = (0, _ThemeContext.useTheme)(),
    theme = _useTheme.theme;
  var white_snow = theme.colors.white_snow,
    _theme$messageList = theme.messageList,
    container = _theme$messageList.container,
    contentContainer = _theme$messageList.contentContainer,
    listContainer = _theme$messageList.listContainer,
    messageContainer = _theme$messageList.messageContainer,
    screenPadding = theme.screenPadding;
  var modifiedTheme = (0, _react.useMemo)(function () {
    return (0, _ThemeContext.mergeThemes)({
      style: myMessageTheme,
      theme: theme
    });
  }, [myMessageTheme, theme]);
  var messageList = (0, _useMessageList.useMessageList)({
    noGroupByUser: noGroupByUser,
    threadList: threadList
  });
  var messageListLengthBeforeUpdate = (0, _react.useRef)(0);
  var messageListLengthAfterUpdate = messageList.length;
  var topMessageBeforeUpdate = (0, _react.useRef)();
  var topMessageAfterUpdate = messageList[messageList.length - 1];
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    autoscrollToTop = _useState2[0],
    setAutoscrollToTop = _useState2[1];
  var onStartReachedTracker = (0, _react.useRef)({});
  var onEndReachedTracker = (0, _react.useRef)({});
  var onStartReachedInPromise = (0, _react.useRef)(null);
  var onEndReachedInPromise = (0, _react.useRef)(null);
  var flatListRef = (0, _react.useRef)(null);
  var _useState3 = (0, _react.useState)(!initialScrollToFirstUnreadMessage),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    isInitialScrollDone = _useState4[0],
    setInitialScrollDone = _useState4[1];
  var channelResyncScrollSet = (0, _react.useRef)(true);
  var scrollToDebounceTimeoutRef = (0, _react.useRef)();
  var initialScrollSettingTimeoutRef = (0, _react.useRef)();
  var messageIdToScrollToRef = (0, _react.useRef)();
  var messageIdLastScrolledToRef = (0, _react.useRef)();
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    hasMoved = _useState6[0],
    setHasMoved = _useState6[1];
  var _useState7 = (0, _react.useState)((_getLastReceivedMessa = (0, _getLastReceivedMessage.getLastReceivedMessage)(messageList)) == null ? void 0 : _getLastReceivedMessa.id),
    _useState8 = (0, _slicedToArray2["default"])(_useState7, 2),
    lastReceivedId = _useState8[0],
    setLastReceivedId = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2["default"])(_useState9, 2),
    scrollToBottomButtonVisible = _useState10[0],
    setScrollToBottomButtonVisible = _useState10[1];
  var _useState11 = (0, _react.useState)(),
    _useState12 = (0, _slicedToArray2["default"])(_useState11, 2),
    stickyHeaderDate = _useState12[0],
    setStickyHeaderDate = _useState12[1];
  var stickyHeaderDateRef = (0, _react.useRef)();
  var channelRef = (0, _react.useRef)(channel);
  channelRef.current = channel;
  var updateStickyHeaderDateIfNeeded = function updateStickyHeaderDateIfNeeded(viewableItems) {
    if (viewableItems.length) {
      var _lastItem$item, _stickyHeaderDateRef$;
      var lastItem = viewableItems.pop();
      var isMessageTypeDeleted = lastItem.item.type === 'deleted';
      if (lastItem != null && (_lastItem$item = lastItem.item) != null && _lastItem$item.created_at && !isMessageTypeDeleted && typeof lastItem.item.created_at !== 'string' && lastItem.item.created_at.toDateString() !== ((_stickyHeaderDateRef$ = stickyHeaderDateRef.current) == null ? void 0 : _stickyHeaderDateRef$.toDateString())) {
        stickyHeaderDateRef.current = lastItem.item.created_at;
        setStickyHeaderDate(lastItem.item.created_at);
      }
    }
  };
  var onViewableItemsChanged = (0, _react.useRef)(function (_ref) {
    var viewableItems = _ref.viewableItems;
    if (_reactNative.Platform.OS === 'android' && viewableItems != null && viewableItems.length && (viewableItems == null ? void 0 : viewableItems.length) >= messageListLengthBeforeUpdate.current) {
      channel.markRead();
    }
    if (viewableItems && !hideStickyDateHeader) {
      updateStickyHeaderDateIfNeeded(viewableItems);
    }
  });
  var resetPaginationTrackersRef = (0, _react.useRef)(function () {
    onStartReachedTracker.current = {};
    onEndReachedTracker.current = {};
  });
  (0, _react.useEffect)(function () {
    setScrollToBottomButtonVisible(false);
  }, [disabled]);
  (0, _react.useEffect)(function () {
    var getShouldMarkReadAutomatically = function getShouldMarkReadAutomatically() {
      if (loading || !channel) {
        return false;
      } else if (channel.countUnread() > 0) {
        if (!initialScrollToFirstUnreadMessage) {
          return true;
        } else {
          if (scrollToBottomButtonVisible) return false;
          return isInitialScrollDone;
        }
      }
      return false;
    };
    if (getShouldMarkReadAutomatically()) {
      markRead();
    }
  }, [loading, scrollToBottomButtonVisible, isInitialScrollDone]);
  (0, _react.useEffect)(function () {
    var _lastReceivedMessage$;
    var lastReceivedMessage = (0, _getLastReceivedMessage.getLastReceivedMessage)(messageList);
    var hasNewMessage = lastReceivedId !== (lastReceivedMessage == null ? void 0 : lastReceivedMessage.id);
    var isMyMessage = (lastReceivedMessage == null ? void 0 : (_lastReceivedMessage$ = lastReceivedMessage.user) == null ? void 0 : _lastReceivedMessage$.id) === client.userID;
    setLastReceivedId(lastReceivedMessage == null ? void 0 : lastReceivedMessage.id);
    var scrollToBottomIfNeeded = function scrollToBottomIfNeeded() {
      var _topMessageBeforeUpda;
      if (!client || !channel || messageList.length === 0) {
        return;
      }
      if (hasNewMessage && isMyMessage || messageListLengthAfterUpdate < messageListLengthBeforeUpdate.current || (_topMessageBeforeUpda = topMessageBeforeUpdate.current) != null && _topMessageBeforeUpda.created_at && topMessageAfterUpdate != null && topMessageAfterUpdate.created_at && topMessageBeforeUpdate.current.created_at < topMessageAfterUpdate.created_at) {
        channelResyncScrollSet.current = false;
        setScrollToBottomButtonVisible(false);
        resetPaginationTrackersRef.current();
        setTimeout(function () {
          var _flatListRef$current;
          (_flatListRef$current = flatListRef.current) == null ? void 0 : _flatListRef$current.scrollToOffset({
            offset: 0
          });
        }, 50);
        setTimeout(function () {
          channelResyncScrollSet.current = true;
          if (channel.countUnread() > 0) {
            markRead();
          }
        }, 500);
      }
    };
    if (threadList || hasNoMoreRecentMessagesToLoad) {
      scrollToBottomIfNeeded();
    } else {
      setScrollToBottomButtonVisible(true);
    }
    if (!hasNoMoreRecentMessagesToLoad && flatListRef.current && messageListLengthBeforeUpdate.current === 0 && messageListLengthAfterUpdate < 10) {
      maybeCallOnStartReached(10);
    }
    messageListLengthBeforeUpdate.current = messageListLengthAfterUpdate;
    topMessageBeforeUpdate.current = topMessageAfterUpdate;
  }, [messageListLengthAfterUpdate, topMessageAfterUpdate == null ? void 0 : topMessageAfterUpdate.id]);
  (0, _react.useEffect)(function () {
    setAutoscrollToTop(hasNoMoreRecentMessagesToLoad);
  }, [messageList, hasNoMoreRecentMessagesToLoad]);
  var shouldApplyAndroidWorkaround = inverted && _reactNative.Platform.OS === 'android';
  var renderItem = function renderItem(_ref2) {
    var _message$user;
    var index = _ref2.index,
      message = _ref2.item;
    if (!channel || channel.disconnected || !channel.initialized && !channel.offlineMode) return null;
    var lastRead = channel.lastRead();
    function isMessageUnread(messageArrayIndex) {
      var msg = messageList == null ? void 0 : messageList[messageArrayIndex];
      if (lastRead && msg != null && msg.created_at) {
        return lastRead < msg.created_at;
      }
      return false;
    }
    var isCurrentMessageUnread = isMessageUnread(index);
    var showUnreadUnderlay = !channel.muteStatus().muted && isCurrentMessageUnread && scrollToBottomButtonVisible;
    var insertInlineUnreadIndicator = showUnreadUnderlay && !isMessageUnread(index + 1);
    if (message.type === 'system') {
      return _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_reactNative.View, {
        testID: "message-list-item-" + index,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 563,
          columnNumber: 11
        }
      }, _react["default"].createElement(MessageSystem, {
        message: message,
        style: [{
          paddingHorizontal: screenPadding
        }, messageContainer],
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 564,
          columnNumber: 13
        }
      })), insertInlineUnreadIndicator && _react["default"].createElement(InlineUnreadIndicator, {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 569,
          columnNumber: 43
        }
      }));
    }
    var wrapMessageInTheme = client.userID === ((_message$user = message.user) == null ? void 0 : _message$user.id) && !!myMessageTheme;
    return wrapMessageInTheme ? _react["default"].createElement(_react["default"].Fragment, null, shouldApplyAndroidWorkaround && (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) && message.dateSeparator && _react["default"].createElement(InlineDateSeparator, {
      date: message.dateSeparator,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 579,
        columnNumber: 36
      }
    }), _react["default"].createElement(_ThemeContext.ThemeProvider, {
      mergedStyle: modifiedTheme,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 580,
        columnNumber: 9
      }
    }, _react["default"].createElement(_reactNative.View, {
      testID: "message-list-item-" + index,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 581,
        columnNumber: 11
      }
    }, _react["default"].createElement(Message, {
      goToMessage: goToMessage,
      groupStyles: (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) ? message.groupStyles : [],
      isTargetedMessage: targetedMessage === message.id,
      lastReceivedId: lastReceivedId === message.id ? lastReceivedId : undefined,
      message: message,
      onThreadSelect: onThreadSelect,
      showUnreadUnderlay: showUnreadUnderlay,
      style: [{
        paddingHorizontal: screenPadding
      }, messageContainer],
      threadList: threadList,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 582,
        columnNumber: 13
      }
    }))), !shouldApplyAndroidWorkaround && (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) && message.dateSeparator && _react["default"].createElement(InlineDateSeparator, {
      date: message.dateSeparator,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 599,
        columnNumber: 36
      }
    }), insertInlineUnreadIndicator && _react["default"].createElement(InlineUnreadIndicator, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 601,
        columnNumber: 41
      }
    })) : _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_reactNative.View, {
      testID: "message-list-item-" + index,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 605,
        columnNumber: 9
      }
    }, shouldApplyAndroidWorkaround && (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) && message.dateSeparator && _react["default"].createElement(InlineDateSeparator, {
      date: message.dateSeparator,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 608,
        columnNumber: 38
      }
    }), _react["default"].createElement(Message, {
      goToMessage: goToMessage,
      groupStyles: (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) ? message.groupStyles : [],
      isTargetedMessage: targetedMessage === message.id,
      lastReceivedId: lastReceivedId === message.id || message.quoted_message_id ? lastReceivedId : undefined,
      message: message,
      onThreadSelect: onThreadSelect,
      showUnreadUnderlay: showUnreadUnderlay,
      style: [{
        paddingHorizontal: screenPadding
      }, messageContainer],
      threadList: threadList,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 609,
        columnNumber: 11
      }
    })), !shouldApplyAndroidWorkaround && (0, _useMessageList.isMessageWithStylesReadByAndDateSeparator)(message) && message.dateSeparator && _react["default"].createElement(InlineDateSeparator, {
      date: message.dateSeparator,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 629,
        columnNumber: 36
      }
    }), insertInlineUnreadIndicator && _react["default"].createElement(InlineUnreadIndicator, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 631,
        columnNumber: 41
      }
    }));
  };
  var maybeCallOnStartReached = function () {
    var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(limit) {
      var callback, onError;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!(messageList != null && messageList.length && onStartReachedTracker.current[messageList.length])) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            if (messageList != null && messageList.length) {
              onStartReachedTracker.current[messageList.length] = true;
            }
            callback = function callback() {
              onStartReachedInPromise.current = null;
              return Promise.resolve();
            };
            onError = function onError() {
              setTimeout(function () {
                onStartReachedTracker.current = {};
              }, 2000);
            };
            if (!onEndReachedInPromise.current) {
              _context.next = 11;
              break;
            }
            _context.next = 8;
            return onEndReachedInPromise.current;
          case 8:
            onStartReachedInPromise.current = loadMoreRecent(limit).then(callback)["catch"](onError);
            _context.next = 12;
            break;
          case 11:
            onStartReachedInPromise.current = loadMoreRecent(limit).then(callback)["catch"](onError);
          case 12:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function maybeCallOnStartReached(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  var maybeCallOnEndReached = function () {
    var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2() {
      var callback, onError;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            if (!(messageList != null && messageList.length && onEndReachedTracker.current[messageList.length])) {
              _context2.next = 2;
              break;
            }
            return _context2.abrupt("return");
          case 2:
            if (messageList != null && messageList.length) {
              onEndReachedTracker.current[messageList.length] = true;
            }
            callback = function callback() {
              onEndReachedInPromise.current = null;
              return Promise.resolve();
            };
            onError = function onError() {
              setTimeout(function () {
                onEndReachedTracker.current = {};
              }, 2000);
            };
            if (!onStartReachedInPromise.current) {
              _context2.next = 11;
              break;
            }
            _context2.next = 8;
            return onStartReachedInPromise.current;
          case 8:
            onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore()).then(callback)["catch"](onError);
            _context2.next = 12;
            break;
          case 11:
            onEndReachedInPromise.current = (threadList ? loadMoreThread() : loadMore()).then(callback)["catch"](onError);
          case 12:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function maybeCallOnEndReached() {
      return _ref4.apply(this, arguments);
    };
  }();
  var handleScroll = function handleScroll(event) {
    if (!channel || !channelResyncScrollSet.current) {
      return;
    }
    var offset = event.nativeEvent.contentOffset.y;
    var visibleLength = event.nativeEvent.layoutMeasurement.height;
    var contentLength = event.nativeEvent.contentSize.height;
    var isScrollAtStart = offset < 100;
    var isScrollAtEnd = contentLength - visibleLength - offset < 100;
    if (isScrollAtStart) {
      maybeCallOnStartReached();
    }
    if (isScrollAtEnd) {
      maybeCallOnEndReached();
    }
    var isScrollAtBottom = offset <= 150;
    var showScrollToBottomButton = !isScrollAtBottom || !hasNoMoreRecentMessagesToLoad;
    var shouldMarkRead = !threadList && offset <= 0 && hasNoMoreRecentMessagesToLoad && channel.countUnread() > 0;
    if (shouldMarkRead) {
      markRead();
    }
    setScrollToBottomButtonVisible(showScrollToBottomButton);
    if (onListScroll) {
      onListScroll(event);
    }
  };
  var goToNewMessages = function () {
    var _ref5 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (hasNoMoreRecentMessagesToLoad) {
              _context3.next = 6;
              break;
            }
            resetPaginationTrackersRef.current();
            _context3.next = 4;
            return reloadChannel();
          case 4:
            _context3.next = 7;
            break;
          case 6:
            if (flatListRef.current) {
              flatListRef.current.scrollToOffset({
                offset: 0
              });
            }
          case 7:
            setScrollToBottomButtonVisible(false);
            if (!threadList) {
              markRead();
            }
          case 9:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function goToNewMessages() {
      return _ref5.apply(this, arguments);
    };
  }();
  var scrollToIndexFailedRetryCountRef = (0, _react.useRef)(0);
  var failScrollTimeoutId = (0, _react.useRef)();
  var onScrollToIndexFailedRef = (0, _react.useRef)(function (info) {
    if (!flatListRef.current) return;
    flatListRef.current.scrollToOffset({
      animated: false,
      offset: info.averageItemLength * info.index
    });
    failScrollTimeoutId.current = setTimeout(function () {
      try {
        var _flatListRef$current2;
        (_flatListRef$current2 = flatListRef.current) == null ? void 0 : _flatListRef$current2.scrollToIndex({
          animated: false,
          index: info.index,
          viewPosition: 0.5
        });
        if (messageIdLastScrolledToRef.current) {
          setTargetedMessage(messageIdLastScrolledToRef.current);
        }
        scrollToIndexFailedRetryCountRef.current = 0;
      } catch (e) {
        if (!onScrollToIndexFailedRef.current || scrollToIndexFailedRetryCountRef.current > MAX_RETRIES_AFTER_SCROLL_FAILURE) {
          console.log("Scrolling to index failed after " + MAX_RETRIES_AFTER_SCROLL_FAILURE + " retries", e);
          scrollToIndexFailedRetryCountRef.current = 0;
          return;
        }
        scrollToIndexFailedRetryCountRef.current += 1;
        onScrollToIndexFailedRef.current(info);
      }
    }, WAIT_FOR_SCROLL_TO_OFFSET_TIMEOUT);
  });
  var goToMessage = (0, _react.useCallback)(function (messageId) {
    var indexOfParentInMessageList = messageList.findIndex(function (message) {
      return (message == null ? void 0 : message.id) === messageId;
    });
    if (indexOfParentInMessageList !== -1 && flatListRef.current) {
      clearTimeout(failScrollTimeoutId.current);
      scrollToIndexFailedRetryCountRef.current = 0;
      flatListRef.current.scrollToIndex({
        animated: true,
        index: indexOfParentInMessageList,
        viewPosition: 0.5
      });
      messageIdLastScrolledToRef.current = messageId;
      setTargetedMessage(messageId);
      return;
    }
    messageIdToScrollToRef.current = messageId;
    loadChannelAroundMessage({
      messageId: messageId
    });
    resetPaginationTrackersRef.current();
  }, [messageList]);
  (0, _react.useEffect)(function () {
    scrollToDebounceTimeoutRef.current = setTimeout(function () {
      if (initialScrollToFirstUnreadMessage) {
        initialScrollSettingTimeoutRef.current = setTimeout(function () {
          setInitialScrollDone(true);
        }, 500);
      }
      var messageIdToScroll = messageIdToScrollToRef.current;
      if (targetedMessage && messageIdLastScrolledToRef.current !== targetedMessage) {
        messageIdToScroll = targetedMessage;
      }
      if (!messageIdToScroll) return;
      var indexOfParentInMessageList = messageList.findIndex(function (message) {
        return (message == null ? void 0 : message.id) === messageIdToScroll;
      });
      if (indexOfParentInMessageList !== -1 && flatListRef.current) {
        clearTimeout(failScrollTimeoutId.current);
        scrollToIndexFailedRetryCountRef.current = 0;
        flatListRef.current.scrollToIndex({
          animated: false,
          index: indexOfParentInMessageList,
          viewPosition: 0.5
        });
        messageIdToScrollToRef.current = undefined;
        messageIdLastScrolledToRef.current = messageIdToScroll;
      }
    }, 150);
    return function () {
      clearTimeout(failScrollTimeoutId.current);
      clearTimeout(scrollToDebounceTimeoutRef.current);
      clearTimeout(initialScrollSettingTimeoutRef.current);
    };
  }, [targetedMessage, initialScrollToFirstUnreadMessage, messageList]);
  var messagesWithImages = legacyImageViewerSwipeBehaviour && messageList.filter(function (message) {
    var isMessageTypeDeleted = message.type === 'deleted';
    if (!isMessageTypeDeleted && message.attachments) {
      return message.attachments.some(function (attachment) {
        return attachment.type === 'image' && !attachment.title_link && !attachment.og_scrape_url && (attachment.image_url || attachment.thumb_url);
      });
    }
    return false;
  });
  var imageString = legacyImageViewerSwipeBehaviour && messagesWithImages && messagesWithImages.map(function (message) {
    var _message$attachments;
    return (_message$attachments = message.attachments) == null ? void 0 : _message$attachments.map(function (attachment) {
      return attachment.image_url || attachment.thumb_url || '';
    }).join();
  }).join();
  var numberOfMessagesWithImages = legacyImageViewerSwipeBehaviour && messagesWithImages && messagesWithImages.length;
  var threadExists = !!thread;
  (0, _react.useEffect)(function () {
    if (legacyImageViewerSwipeBehaviour && isListActive && (threadList && thread || !threadList && !thread)) {
      setMessages(messagesWithImages);
    }
  }, [imageString, isListActive, legacyImageViewerSwipeBehaviour, numberOfMessagesWithImages, threadExists, threadList]);
  var stickyHeaderFormatDate = (stickyHeaderDate == null ? void 0 : stickyHeaderDate.getFullYear()) === new Date().getFullYear() ? 'MMM D' : 'MMM D, YYYY';
  var tStickyHeaderDate = stickyHeaderDate && !hideStickyDateHeader ? tDateTimeParser(stickyHeaderDate) : null;
  var stickyHeaderDateString = (0, _react.useMemo)(function () {
    if (tStickyHeaderDate === null || hideStickyDateHeader) return null;
    if ((0, _TranslationContext.isDayOrMoment)(tStickyHeaderDate)) return tStickyHeaderDate.format(stickyHeaderFormatDate);
    return new Date(tStickyHeaderDate).toDateString();
  }, [tStickyHeaderDate, stickyHeaderFormatDate, hideStickyDateHeader]);
  var dismissImagePicker = function dismissImagePicker() {
    if (!hasMoved && selectedPicker) {
      setSelectedPicker(undefined);
      closePicker();
    }
  };
  var onScrollBeginDrag = function onScrollBeginDrag() {
    return !hasMoved && selectedPicker && setHasMoved(true);
  };
  var onScrollEndDrag = function onScrollEndDrag() {
    return hasMoved && selectedPicker && setHasMoved(false);
  };
  var refCallback = function refCallback(ref) {
    flatListRef.current = ref;
    if (setFlatListRef) {
      setFlatListRef(ref);
    }
  };
  var debugRef = (0, _DebugContext.useDebugContext)();
  var isDebugModeEnabled = __DEV__ && debugRef && debugRef.current;
  if (isDebugModeEnabled) {
    if (debugRef.current.setEventType) debugRef.current.setEventType('send');
    if (debugRef.current.setSendEventParams) debugRef.current.setSendEventParams({
      action: thread ? 'ThreadList' : 'Messages',
      data: messageList
    });
  }
  var renderListEmptyComponent = (0, _react.useCallback)(function () {
    return _react["default"].createElement(_reactNative.View, {
      style: [styles.flex, shouldApplyAndroidWorkaround ? styles.invertAndroid : styles.invert],
      testID: "empty-state",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1008,
        columnNumber: 7
      }
    }, _react["default"].createElement(EmptyStateIndicator, {
      listType: "message",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1012,
        columnNumber: 9
      }
    }));
  }, [EmptyStateIndicator, shouldApplyAndroidWorkaround]);
  var ListFooterComponent = (0, _react.useCallback)(function () {
    return _react["default"].createElement(_reactNative.View, {
      style: shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1020,
        columnNumber: 7
      }
    }, _react["default"].createElement(FooterComponent, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1021,
        columnNumber: 9
      }
    }));
  }, [shouldApplyAndroidWorkaround, FooterComponent]);
  var ListHeaderComponent = (0, _react.useCallback)(function () {
    return _react["default"].createElement(_reactNative.View, {
      style: shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1029,
        columnNumber: 7
      }
    }, _react["default"].createElement(HeaderComponent, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1030,
        columnNumber: 9
      }
    }));
  }, [shouldApplyAndroidWorkaround, HeaderComponent]);
  if (!FlatList) return null;
  if (loading) {
    return _react["default"].createElement(_reactNative.View, {
      style: styles.flex,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1040,
        columnNumber: 7
      }
    }, _react["default"].createElement(LoadingIndicator, {
      listType: "message",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1041,
        columnNumber: 9
      }
    }));
  }
  var StickyHeaderComponent = function StickyHeaderComponent() {
    if (!stickyHeaderDateString) return null;
    if (StickyHeader) return _react["default"].createElement(StickyHeader, {
      dateString: stickyHeaderDateString,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1048,
        columnNumber: 30
      }
    });
    if (messageListLengthAfterUpdate) return _react["default"].createElement(DateHeader, {
      dateString: stickyHeaderDateString,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 1049,
        columnNumber: 46
      }
    });
    return null;
  };
  var additionalFlatListPropsExcludingStyle;
  if (additionalFlatListProps) {
    var contentContainerStyle = additionalFlatListProps.contentContainerStyle,
      style = additionalFlatListProps.style,
      rest = (0, _objectWithoutProperties2["default"])(additionalFlatListProps, _excluded);
    additionalFlatListPropsExcludingStyle = rest;
  }
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: white_snow
    }, container],
    testID: "message-flat-list-wrapper",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1065,
      columnNumber: 5
    }
  }, _react["default"].createElement(FlatList, (0, _extends2["default"])({
    CellRendererComponent: shouldApplyAndroidWorkaround ? InvertedCellRendererComponent : undefined,
    contentContainerStyle: [styles.contentContainer, additionalFlatListProps == null ? void 0 : additionalFlatListProps.contentContainerStyle, contentContainer],
    data: messageList,
    extraData: disabled || !hasNoMoreRecentMessagesToLoad,
    inverted: shouldApplyAndroidWorkaround ? false : inverted,
    keyboardShouldPersistTaps: "handled",
    keyExtractor: keyExtractor,
    ListEmptyComponent: renderListEmptyComponent,
    ListFooterComponent: ListFooterComponent,
    ListHeaderComponent: ListHeaderComponent,
    maintainVisibleContentPosition: {
      autoscrollToTopThreshold: autoscrollToTop ? 10 : undefined,
      minIndexForVisible: 1
    },
    maxToRenderPerBatch: 30,
    onScroll: handleScroll,
    onScrollBeginDrag: onScrollBeginDrag,
    onScrollEndDrag: onScrollEndDrag,
    onScrollToIndexFailed: onScrollToIndexFailedRef.current,
    onTouchEnd: dismissImagePicker,
    onViewableItemsChanged: onViewableItemsChanged.current,
    ref: refCallback,
    renderItem: renderItem,
    scrollEnabled: overlay === 'none',
    showsVerticalScrollIndicator: !shouldApplyAndroidWorkaround,
    style: [styles.listContainer, listContainer, additionalFlatListProps == null ? void 0 : additionalFlatListProps.style, shouldApplyAndroidWorkaround ? styles.invertAndroid : undefined],
    testID: "message-flat-list",
    viewabilityConfig: flatListViewabilityConfig
  }, additionalFlatListPropsExcludingStyle, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1069,
      columnNumber: 7
    }
  })), !loading && _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(_reactNative.View, {
    style: styles.stickyHeader,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1114,
      columnNumber: 11
    }
  }, _react["default"].createElement(StickyHeaderComponent, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1115,
      columnNumber: 13
    }
  })), !disableTypingIndicator && TypingIndicator && _react["default"].createElement(TypingIndicatorContainer, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1118,
      columnNumber: 13
    }
  }, _react["default"].createElement(TypingIndicator, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1119,
      columnNumber: 15
    }
  })), _react["default"].createElement(ScrollToBottomButton, {
    onPress: goToNewMessages,
    showNotification: scrollToBottomButtonVisible,
    unreadCount: threadList ? 0 : channel == null ? void 0 : channel.countUnread(),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1122,
      columnNumber: 11
    }
  })), _react["default"].createElement(NetworkDownIndicator, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1129,
      columnNumber: 7
    }
  }));
};
var MessageList = function MessageList(props) {
  var _useAttachmentPickerC = (0, _AttachmentPickerContext.useAttachmentPickerContext)(),
    closePicker = _useAttachmentPickerC.closePicker,
    selectedPicker = _useAttachmentPickerC.selectedPicker,
    setSelectedPicker = _useAttachmentPickerC.setSelectedPicker;
  var _useChannelContext = (0, _ChannelContext.useChannelContext)(),
    channel = _useChannelContext.channel,
    disabled = _useChannelContext.disabled,
    EmptyStateIndicator = _useChannelContext.EmptyStateIndicator,
    enableMessageGroupingByUser = _useChannelContext.enableMessageGroupingByUser,
    error = _useChannelContext.error,
    hideStickyDateHeader = _useChannelContext.hideStickyDateHeader,
    isChannelActive = _useChannelContext.isChannelActive,
    loadChannelAroundMessage = _useChannelContext.loadChannelAroundMessage,
    loading = _useChannelContext.loading,
    LoadingIndicator = _useChannelContext.LoadingIndicator,
    markRead = _useChannelContext.markRead,
    NetworkDownIndicator = _useChannelContext.NetworkDownIndicator,
    reloadChannel = _useChannelContext.reloadChannel,
    scrollToFirstUnreadThreshold = _useChannelContext.scrollToFirstUnreadThreshold,
    setTargetedMessage = _useChannelContext.setTargetedMessage,
    StickyHeader = _useChannelContext.StickyHeader,
    targetedMessage = _useChannelContext.targetedMessage;
  var _useChatContext = (0, _ChatContext.useChatContext)(),
    client = _useChatContext.client;
  var _useImageGalleryConte = (0, _ImageGalleryContext.useImageGalleryContext)(),
    setMessages = _useImageGalleryConte.setMessages;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    DateHeader = _useMessagesContext.DateHeader,
    disableTypingIndicator = _useMessagesContext.disableTypingIndicator,
    FlatList = _useMessagesContext.FlatList,
    initialScrollToFirstUnreadMessage = _useMessagesContext.initialScrollToFirstUnreadMessage,
    InlineDateSeparator = _useMessagesContext.InlineDateSeparator,
    InlineUnreadIndicator = _useMessagesContext.InlineUnreadIndicator,
    legacyImageViewerSwipeBehaviour = _useMessagesContext.legacyImageViewerSwipeBehaviour,
    Message = _useMessagesContext.Message,
    MessageSystem = _useMessagesContext.MessageSystem,
    myMessageTheme = _useMessagesContext.myMessageTheme,
    ScrollToBottomButton = _useMessagesContext.ScrollToBottomButton,
    TypingIndicator = _useMessagesContext.TypingIndicator,
    TypingIndicatorContainer = _useMessagesContext.TypingIndicatorContainer;
  var _usePaginatedMessageL = (0, _PaginatedMessageListContext.usePaginatedMessageListContext)(),
    hasNoMoreRecentMessagesToLoad = _usePaginatedMessageL.hasNoMoreRecentMessagesToLoad,
    loadMore = _usePaginatedMessageL.loadMore,
    loadMoreRecent = _usePaginatedMessageL.loadMoreRecent;
  var _useOverlayContext = (0, _OverlayContext.useOverlayContext)(),
    overlay = _useOverlayContext.overlay;
  var _useThreadContext = (0, _ThreadContext.useThreadContext)(),
    loadMoreThread = _useThreadContext.loadMoreThread,
    thread = _useThreadContext.thread;
  var _useTranslationContex = (0, _TranslationContext.useTranslationContext)(),
    t = _useTranslationContex.t,
    tDateTimeParser = _useTranslationContex.tDateTimeParser;
  return _react["default"].createElement(MessageListWithContext, (0, _extends2["default"])({
    channel: channel,
    client: client,
    closePicker: closePicker,
    DateHeader: DateHeader,
    disabled: disabled,
    disableTypingIndicator: disableTypingIndicator,
    EmptyStateIndicator: EmptyStateIndicator,
    enableMessageGroupingByUser: enableMessageGroupingByUser,
    error: error,
    FlatList: FlatList,
    hasNoMoreRecentMessagesToLoad: hasNoMoreRecentMessagesToLoad,
    hideStickyDateHeader: hideStickyDateHeader,
    initialScrollToFirstUnreadMessage: initialScrollToFirstUnreadMessage,
    InlineDateSeparator: InlineDateSeparator,
    InlineUnreadIndicator: InlineUnreadIndicator,
    isListActive: isChannelActive,
    legacyImageViewerSwipeBehaviour: legacyImageViewerSwipeBehaviour,
    loadChannelAroundMessage: loadChannelAroundMessage,
    loading: loading,
    LoadingIndicator: LoadingIndicator,
    loadMore: loadMore,
    loadMoreRecent: loadMoreRecent,
    loadMoreThread: loadMoreThread,
    markRead: markRead,
    Message: Message,
    MessageSystem: MessageSystem,
    myMessageTheme: myMessageTheme,
    NetworkDownIndicator: NetworkDownIndicator,
    overlay: overlay,
    reloadChannel: reloadChannel,
    ScrollToBottomButton: ScrollToBottomButton,
    scrollToFirstUnreadThreshold: scrollToFirstUnreadThreshold,
    selectedPicker: selectedPicker,
    setMessages: setMessages,
    setSelectedPicker: setSelectedPicker,
    setTargetedMessage: setTargetedMessage,
    StickyHeader: StickyHeader,
    t: t,
    targetedMessage: targetedMessage,
    tDateTimeParser: tDateTimeParser,
    thread: thread,
    TypingIndicator: TypingIndicator,
    TypingIndicatorContainer: TypingIndicatorContainer
  }, props, {
    noGroupByUser: !enableMessageGroupingByUser || props.noGroupByUser,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 1187,
      columnNumber: 5
    }
  }));
};
exports.MessageList = MessageList;
//# sourceMappingURL=MessageList.js.map
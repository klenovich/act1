var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileAttachmentGroup = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _Attachment = require("./Attachment");
var _MessageContext = require("../../contexts/messageContext/MessageContext");
var _MessagesContext = require("../../contexts/messagesContext/MessagesContext");
var _ThemeContext = require("../../contexts/themeContext/ThemeContext");
var _native = require("../../native");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Attachment/FileAttachmentGroup.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var FILE_PREVIEW_HEIGHT = 60;
var styles = _reactNative.StyleSheet.create({
  container: {
    padding: 4
  },
  fileContainer: {
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    height: FILE_PREVIEW_HEIGHT,
    justifyContent: 'space-between',
    paddingLeft: 8,
    paddingRight: 8
  }
});
var FileAttachmentGroupWithContext = function FileAttachmentGroupWithContext(props) {
  var Attachment = props.Attachment,
    AudioAttachment = props.AudioAttachment,
    files = props.files,
    messageId = props.messageId,
    _props$styles = props.styles,
    stylesProp = _props$styles === void 0 ? {} : _props$styles;
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    filesToDisplay = _useState2[0],
    setFilesToDisplay = _useState2[1];
  (0, _react.useEffect)(function () {
    setFilesToDisplay(files.map(function (file) {
      return (0, _extends2["default"])({}, file, {
        duration: 0,
        paused: true,
        progress: 0
      });
    }));
  }, [files]);
  var onLoad = function onLoad(index, duration) {
    setFilesToDisplay(function (prevFilesToDisplay) {
      return prevFilesToDisplay.map(function (fileToDisplay, id) {
        return (0, _extends2["default"])({}, fileToDisplay, {
          duration: id.toString() === index ? duration : fileToDisplay.duration
        });
      });
    });
  };
  var onProgress = function onProgress(index, currentTime, hasEnd) {
    setFilesToDisplay(function (prevFileUploads) {
      return prevFileUploads.map(function (fileUpload, id) {
        return (0, _extends2["default"])({}, fileUpload, {
          progress: id.toString() === index ? hasEnd ? 1 : currentTime ? currentTime / fileUpload.duration : 0 : fileUpload.progress
        });
      });
    });
  };
  var onPlayPause = function onPlayPause(index, pausedStatus) {
    if (pausedStatus === false) {
      setFilesToDisplay(function (prevFileUploads) {
        return prevFileUploads.map(function (fileUpload, id) {
          return (0, _extends2["default"])({}, fileUpload, {
            paused: id.toString() !== index
          });
        });
      });
    } else {
      setFilesToDisplay(function (prevFileUploads) {
        return prevFileUploads.map(function (fileUpload) {
          return (0, _extends2["default"])({}, fileUpload, {
            paused: true
          });
        });
      });
    }
  };
  var _useTheme = (0, _ThemeContext.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    grey_whisper = _useTheme$theme$color.grey_whisper,
    white = _useTheme$theme$color.white,
    container = _useTheme$theme.messageSimple.fileAttachmentGroup.container;
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.container, container, stylesProp.container],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 131,
      columnNumber: 5
    }
  }, filesToDisplay.map(function (file, index) {
    return _react["default"].createElement(_reactNative.View, {
      key: messageId + "-" + index,
      style: [{
        paddingBottom: index !== files.length - 1 ? 4 : 0
      }, stylesProp.attachmentContainer],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 133,
        columnNumber: 9
      }
    }, file.type === 'audio' && (0, _native.isAudioPackageAvailable)() ? _react["default"].createElement(_reactNative.View, {
      accessibilityLabel: "audio-attachment-preview",
      style: [styles.fileContainer, index === filesToDisplay.length - 1 ? {
        marginBottom: 0
      } : {}, {
        backgroundColor: white,
        borderColor: grey_whisper,
        width: -16
      }],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 141,
        columnNumber: 13
      }
    }, _react["default"].createElement(AudioAttachment, {
      item: {
        duration: file.duration,
        file: {
          name: file.title,
          uri: file.asset_url
        },
        id: index.toString(),
        paused: file.paused,
        progress: file.progress
      },
      onLoad: onLoad,
      onPlayPause: onPlayPause,
      onProgress: onProgress,
      testID: "audio-attachment-preview",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 157,
        columnNumber: 15
      }
    })) : _react["default"].createElement(Attachment, {
      attachment: file,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 172,
        columnNumber: 13
      }
    }));
  }));
};
var areEqual = function areEqual(prevProps, nextProps) {
  var prevFiles = prevProps.files;
  var nextFiles = nextProps.files;
  return prevFiles.length === nextFiles.length;
};
var MemoizedFileAttachmentGroup = _react["default"].memo(FileAttachmentGroupWithContext, areEqual);
var FileAttachmentGroup = function FileAttachmentGroup(props) {
  var propFiles = props.files,
    messageId = props.messageId;
  var _useMessageContext = (0, _MessageContext.useMessageContext)(),
    contextFiles = _useMessageContext.files;
  var _useMessagesContext = (0, _MessagesContext.useMessagesContext)(),
    _useMessagesContext$A = _useMessagesContext.Attachment,
    Attachment = _useMessagesContext$A === void 0 ? _Attachment.Attachment : _useMessagesContext$A,
    AudioAttachment = _useMessagesContext.AudioAttachment;
  var files = propFiles || contextFiles;
  if (!files.length) return null;
  return _react["default"].createElement(MemoizedFileAttachmentGroup, {
    Attachment: Attachment,
    AudioAttachment: AudioAttachment,
    files: files,
    messageId: messageId,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 217,
      columnNumber: 5
    }
  });
};
exports.FileAttachmentGroup = FileAttachmentGroup;
FileAttachmentGroup.displayName = 'FileAttachmentGroup{messageSimple{fileAttachmentGroup}}';
//# sourceMappingURL=FileAttachmentGroup.js.map
{"version":3,"names":["_buildThumbnail","require","buildThumbnailGrid","_ref","grid","images","_ref$invertedDirectio","invertedDirections","sizeConfig","gridHeight","gridWidth","imageIndex","thumbnailGrid","numOfColumns","length","forEach","rows","colIndex","totalFlexValue","reduce","acc","curr","flexValue","tHeight","tWidth","currentImage","thumbnail","buildThumbnail","height","image","resizeMode","width","push"],"sources":["buildThumbnailGrid.ts"],"sourcesContent":["import type { Attachment } from 'stream-chat';\n\nimport { buildThumbnail } from './buildThumbnail';\nimport type { GallerySizeAndThumbnailGrid, GallerySizeConfig, ThumbnailGrid } from './types';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\n/**\n * Builds a grid of thumbnail images from image attachments.\n * This function take a object parameter with following properties:\n *\n * @params\n *\n * - {number[][]} grid - Grid pattern of the gallery. Each numeric value in the array represents the flex value of corresponding image in grid.\n * - {Attachment[]} images - Array of image attachments.\n * - {GallerySizeConfig} sizeConfig - Theme config for the gallery.\n * - {boolean} invertedDirections - Whether to invert the direction of the grid. By default grid is rendered with column as primary direction and row as secondary direction.\n *\n * @usage\n *\n * ```\n * const { thumbnailGrid, invertedDirection } = buildThumbnailGrid({\n *  grid: [[1], [1]],\n *  images: [image1, image2],\n *  sizeConfig: {\n *    gridHeight: 200,\n *    gridWidth: 200,\n *    maxHeight: 200,\n *    maxWidth: 200,\n *    minHeight: 200,\n *    minWidth: 200,\n *  },\n * })\n *\n * Rendering logic on UI:\n *\n * ```\n * <View style={{ flexDirection: invertedDirection ? 'row' : 'column }}>\n * {\n *  thumbnailGrid.forEach(rows => {\n *    return (\n *      <View style={{ flexDirection: invertedDirection ? 'column' : 'row' }}>\n *       {\n *        rows.forEach(thumbnail => (\n *          <Image\n *            source={{ uri: thumbnail.url }}\n *            resizeMode={thumbnail.resizeMode}\n *            width={thumbnail.width}\n *            height={thumbnail.height}\n *          />\n *       ))}\n *      </View>\n *    )});\n * }\n * </View>\n * ```\n *\n * Lets look at different examples of grid and invertedDirections param:\n *\n * EXAMPLE 1:\n *\n * ```\n * {\n *  grid: [[2, 1], [2, 1]]\n *  invertedDirections: false\n * }\n * ```\n *\n * Resulting thumbnail grid on rendered UI:\n *\n *  __________________\n * |            |     |\n * |            |     |\n * |------------------|\n * |            |     |\n * |            |     |\n *  ------------------\n *\n * EXAMPLE 2:\n *\n * ```\n * {\n *  grid: [[2, 1], [2, 1]]\n *  invertedDirections: true\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |         |        |\n * |         |        |\n * |         |        |\n * |         |        |\n * |------------------|\n * |         |        |\n * |         |        |\n *  ------------------\n *\n * EXAMPLE 3:\n *\n * ```\n * {\n *  grid: [[2, 1]]\n *  invertedDirections: false\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |                  |\n * |                  |\n * |                  |\n * |                  |\n * |------------------|\n * |                  |\n * |                  |\n *  ------------------\n *\n * EXAMPLE 4:\n *\n * ```\n * {\n *  grid: [[2, 1]]\n *  invertedDirections: true\n * }\n * ```\n * Resulting thumbnail grid on rendered UI:\n *  __________________\n * |            |     |\n * |            |     |\n * |            |     |\n * |            |     |\n * |            |     |\n *  ------------------\n *\n * @return {GallerySizeAndThumbnailGrid}\n */\nexport function buildThumbnailGrid<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  grid,\n  images,\n  invertedDirections = false,\n  sizeConfig,\n}: {\n  grid: number[][];\n  images: Attachment<StreamChatGenerics>[];\n  invertedDirections: boolean;\n  sizeConfig: GallerySizeConfig;\n}): GallerySizeAndThumbnailGrid {\n  const { gridHeight, gridWidth } = sizeConfig;\n\n  let imageIndex = 0;\n  const thumbnailGrid: ThumbnailGrid = [];\n  const numOfColumns = grid.length;\n  grid.forEach((rows, colIndex) => {\n    const totalFlexValue = rows.reduce((acc, curr) => acc + curr, 0);\n\n    rows.forEach((flexValue) => {\n      const tHeight = invertedDirections\n        ? gridHeight / numOfColumns\n        : gridHeight * (flexValue / totalFlexValue);\n\n      const tWidth = invertedDirections\n        ? gridWidth * (flexValue / totalFlexValue)\n        : gridWidth / numOfColumns;\n\n      const currentImage = images[imageIndex];\n      const thumbnail = buildThumbnail({\n        height: tHeight,\n        image: currentImage,\n        resizeMode: 'cover',\n        width: tWidth,\n      });\n\n      if (!thumbnailGrid[colIndex]) {\n        thumbnailGrid[colIndex] = [];\n      }\n\n      thumbnailGrid[colIndex].push(thumbnail);\n      imageIndex++;\n    });\n  });\n  return {\n    height: gridHeight,\n    invertedDirections,\n    thumbnailGrid,\n    width: gridWidth,\n  };\n}\n"],"mappings":";;;;AAEA,IAAAA,eAAA,GAAAC,OAAA;AAqIO,SAASC,kBAAkBA,CAAAC,IAAA,EAYF;EAAA,IAT9BC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,MAAM,GAAAF,IAAA,CAANE,MAAM;IAAAC,qBAAA,GAAAH,IAAA,CACNI,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAC1BE,UAAU,GAAAL,IAAA,CAAVK,UAAU;EAOV,IAAQC,UAAU,GAAgBD,UAAU,CAApCC,UAAU;IAAEC,SAAS,GAAKF,UAAU,CAAxBE,SAAS;EAE7B,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAMC,aAA4B,GAAG,EAAE;EACvC,IAAMC,YAAY,GAAGT,IAAI,CAACU,MAAM;EAChCV,IAAI,CAACW,OAAO,CAAC,UAACC,IAAI,EAAEC,QAAQ,EAAK;IAC/B,IAAMC,cAAc,GAAGF,IAAI,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,IAAI;MAAA,OAAKD,GAAG,GAAGC,IAAI;IAAA,GAAE,CAAC,CAAC;IAEhEL,IAAI,CAACD,OAAO,CAAC,UAACO,SAAS,EAAK;MAC1B,IAAMC,OAAO,GAAGhB,kBAAkB,GAC9BE,UAAU,GAAGI,YAAY,GACzBJ,UAAU,IAAIa,SAAS,GAAGJ,cAAc,CAAC;MAE7C,IAAMM,MAAM,GAAGjB,kBAAkB,GAC7BG,SAAS,IAAIY,SAAS,GAAGJ,cAAc,CAAC,GACxCR,SAAS,GAAGG,YAAY;MAE5B,IAAMY,YAAY,GAAGpB,MAAM,CAACM,UAAU,CAAC;MACvC,IAAMe,SAAS,GAAG,IAAAC,8BAAc,EAAC;QAC/BC,MAAM,EAAEL,OAAO;QACfM,KAAK,EAAEJ,YAAY;QACnBK,UAAU,EAAE,OAAO;QACnBC,KAAK,EAAEP;MACT,CAAC,CAAC;MAEF,IAAI,CAACZ,aAAa,CAACK,QAAQ,CAAC,EAAE;QAC5BL,aAAa,CAACK,QAAQ,CAAC,GAAG,EAAE;MAC9B;MAEAL,aAAa,CAACK,QAAQ,CAAC,CAACe,IAAI,CAACN,SAAS,CAAC;MACvCf,UAAU,EAAE;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAO;IACLiB,MAAM,EAAEnB,UAAU;IAClBF,kBAAkB,EAAlBA,kBAAkB;IAClBK,aAAa,EAAbA,aAAa;IACbmB,KAAK,EAAErB;EACT,CAAC;AACH"}
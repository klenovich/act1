var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioAttachment = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _dayjs = _interopRequireDefault(require("dayjs"));
var _duration = _interopRequireDefault(require("dayjs/plugin/duration"));
var _contexts = require("../../contexts");
var _icons = require("../../icons");
var _native = require("../../native");
var _ProgressControl = require("../ProgressControl/ProgressControl");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Attachment/AudioAttachment.tsx";
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
_dayjs["default"].extend(_duration["default"]);
var FILE_PREVIEW_HEIGHT = 70;
var styles = _reactNative.StyleSheet.create({
  fileContainer: {
    borderRadius: 12,
    borderWidth: 1,
    flexDirection: 'row',
    height: FILE_PREVIEW_HEIGHT,
    paddingLeft: 8,
    paddingRight: 8
  },
  fileContentContainer: {
    flexDirection: 'row',
    paddingRight: 40
  },
  filenameText: {
    fontSize: 14,
    fontWeight: 'bold',
    paddingLeft: 10
  },
  fileTextContainer: {
    justifyContent: 'space-around'
  },
  flatList: {
    marginBottom: 12,
    maxHeight: FILE_PREVIEW_HEIGHT * 2.5 + 16
  },
  overlay: {
    borderRadius: 12,
    marginLeft: 8,
    marginRight: 8
  },
  progressControlView: {
    flex: 8
  },
  progressDurationText: {
    flex: 4,
    fontSize: 12,
    paddingLeft: 10,
    paddingRight: 8
  },
  roundedView: {
    alignItems: 'center',
    alignSelf: 'center',
    borderRadius: 50,
    display: 'flex',
    elevation: 4,
    height: 36,
    justifyContent: 'center',
    shadowOffset: {
      height: 2,
      width: 0
    },
    shadowOpacity: 0.23,
    shadowRadius: 2.62,
    width: 36
  }
});
var AudioAttachmentWithContext = function AudioAttachmentWithContext(props) {
  var soundRef = _react["default"].useRef(null);
  var item = props.item,
    onLoad = props.onLoad,
    onPlayPause = props.onPlayPause,
    onProgress = props.onProgress;
  var handleLoad = function handleLoad(payload) {
    onLoad(item.id, payload.duration);
  };
  var handleProgress = function handleProgress(data) {
    if (data.currentTime && data.seekableDuration) {
      onProgress(item.id, data.currentTime);
    }
  };
  var handlePlayPause = function () {
    var _ref = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(isPausedStatusAvailable) {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (!soundRef.current) {
              _context.next = 17;
              break;
            }
            if (!(isPausedStatusAvailable === undefined)) {
              _context.next = 16;
              break;
            }
            if (item.progress === 1) {
              if (soundRef.current.seek) soundRef.current.seek(0);
              if (soundRef.current.setPositionAsync) soundRef.current.setPositionAsync(0);
            }
            if (!item.paused) {
              _context.next = 10;
              break;
            }
            if (!soundRef.current.playAsync) {
              _context.next = 7;
              break;
            }
            _context.next = 7;
            return soundRef.current.playAsync();
          case 7:
            onPlayPause(item.id, false);
            _context.next = 14;
            break;
          case 10:
            if (!soundRef.current.pauseAsync) {
              _context.next = 13;
              break;
            }
            _context.next = 13;
            return soundRef.current.pauseAsync();
          case 13:
            onPlayPause(item.id, true);
          case 14:
            _context.next = 17;
            break;
          case 16:
            onPlayPause(item.id, isPausedStatusAvailable);
          case 17:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function handlePlayPause(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var handleProgressDrag = function () {
    var _ref2 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(position) {
      var _soundRef$current, _soundRef$current2;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            onProgress(item.id, position);
            if ((_soundRef$current = soundRef.current) != null && _soundRef$current.seek) soundRef.current.seek(position);
            if (!((_soundRef$current2 = soundRef.current) != null && _soundRef$current2.setPositionAsync)) {
              _context2.next = 5;
              break;
            }
            _context2.next = 5;
            return soundRef.current.setPositionAsync(position * 1000);
          case 5:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function handleProgressDrag(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  var handleEnd = function handleEnd() {
    onPlayPause(item.id, true);
    onProgress(item.id, item.duration, true);
  };
  var onPlaybackStatusUpdate = function onPlaybackStatusUpdate(playbackStatus) {
    if (!playbackStatus.isLoaded) {
      if (playbackStatus.error) {
        console.log("Encountered a fatal error during playback: " + playbackStatus.error);
      }
    } else {
      var durationMillis = playbackStatus.durationMillis,
        positionMillis = playbackStatus.positionMillis;
      onLoad(item.id, durationMillis / 1000);
      if (playbackStatus.isPlaying) {
        onProgress(item.id, positionMillis / 1000);
      } else {}
      if (playbackStatus.isBuffering) {}
      if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
        handleEnd();
      }
    }
  };
  (0, _react.useEffect)(function () {
    if (_native.Sound.Player === null) {
      var initiateSound = function () {
        var _ref3 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee3() {
          return _regenerator["default"].wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (!(item && item.file && item.file.uri)) {
                  _context3.next = 4;
                  break;
                }
                _context3.next = 3;
                return _native.Sound.initializeSound({
                  uri: item.file.uri
                }, {}, onPlaybackStatusUpdate);
              case 3:
                soundRef.current = _context3.sent;
              case 4:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return function initiateSound() {
          return _ref3.apply(this, arguments);
        };
      }();
      initiateSound();
    }
    return function () {
      var _soundRef$current3;
      if ((_soundRef$current3 = soundRef.current) != null && _soundRef$current3.stopAsync && soundRef.current.unloadAsync) {
        soundRef.current.stopAsync();
        soundRef.current.unloadAsync();
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    var initalPlayPause = function () {
      var _ref4 = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!soundRef.current) {
                _context4.next = 10;
                break;
              }
              if (!item.paused) {
                _context4.next = 7;
                break;
              }
              if (!soundRef.current.pauseAsync) {
                _context4.next = 5;
                break;
              }
              _context4.next = 5;
              return soundRef.current.pauseAsync();
            case 5:
              _context4.next = 10;
              break;
            case 7:
              if (!soundRef.current.playAsync) {
                _context4.next = 10;
                break;
              }
              _context4.next = 10;
              return soundRef.current.playAsync();
            case 10:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      return function initalPlayPause() {
        return _ref4.apply(this, arguments);
      };
    }();
    if (!_native.Sound.Player) {
      initalPlayPause();
    }
  }, [item.paused]);
  var _useTheme = (0, _contexts.useTheme)(),
    _useTheme$theme = _useTheme.theme,
    _useTheme$theme$color = _useTheme$theme.colors,
    accent_blue = _useTheme$theme$color.accent_blue,
    black = _useTheme$theme$color.black,
    grey_dark = _useTheme$theme$color.grey_dark,
    static_black = _useTheme$theme$color.static_black,
    static_white = _useTheme$theme$color.static_white,
    _useTheme$theme$messa = _useTheme$theme.messageInput.fileUploadPreview,
    _useTheme$theme$messa2 = _useTheme$theme$messa.audioAttachment,
    progressControlView = _useTheme$theme$messa2.progressControlView,
    progressDurationText = _useTheme$theme$messa2.progressDurationText,
    roundedView = _useTheme$theme$messa2.roundedView,
    fileContentContainer = _useTheme$theme$messa.fileContentContainer,
    filenameText = _useTheme$theme$messa.filenameText,
    fileTextContainer = _useTheme$theme$messa.fileTextContainer;
  var progressValueInSeconds = item.duration * item.progress;
  var progressDuration = progressValueInSeconds ? progressValueInSeconds / 3600 >= 1 ? _dayjs["default"].duration(progressValueInSeconds, 'second').format('HH:mm:ss') : _dayjs["default"].duration(progressValueInSeconds, 'second').format('mm:ss') : '00:00';
  var lastIndexOfDot = item.file.name.lastIndexOf('.');
  return _react["default"].createElement(_reactNative.View, {
    style: [styles.fileContentContainer, fileContentContainer],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 222,
      columnNumber: 5
    }
  }, _react["default"].createElement(_reactNative.TouchableOpacity, {
    accessibilityLabel: "Play Pause Button",
    onPress: function onPress() {
      return handlePlayPause();
    },
    style: [styles.roundedView, roundedView, {
      backgroundColor: static_white,
      shadowColor: black
    }],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 223,
      columnNumber: 7
    }
  }, item.paused ? _react["default"].createElement(_icons.Play, {
    height: 24,
    pathFill: static_black,
    width: 24,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 233,
      columnNumber: 11
    }
  }) : _react["default"].createElement(_icons.Pause, {
    height: 24,
    pathFill: static_black,
    width: 24,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 235,
      columnNumber: 11
    }
  })), _react["default"].createElement(_reactNative.View, {
    style: [styles.fileTextContainer, fileTextContainer],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238,
      columnNumber: 7
    }
  }, _react["default"].createElement(_reactNative.Text, {
    accessibilityLabel: "File Name",
    numberOfLines: 1,
    style: [styles.filenameText, {
      color: black,
      width: 16 - 40 - 24 - 24
    }, _reactNative.I18nManager.isRTL ? {
      writingDirection: 'rtl'
    } : {
      writingDirection: 'ltr'
    }, filenameText],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 239,
      columnNumber: 9
    }
  }, item.file.name.slice(0, 12) + '...' + item.file.name.slice(lastIndexOfDot)), _react["default"].createElement(_reactNative.View, {
    style: {
      alignItems: 'center',
      display: 'flex',
      flexDirection: 'row'
    },
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 258,
      columnNumber: 9
    }
  }, _native.Sound.Player && _react["default"].createElement(_native.Sound.Player, {
    onEnd: handleEnd,
    onLoad: handleLoad,
    onProgress: handleProgress,
    paused: item.paused,
    soundRef: soundRef,
    testID: "sound-player",
    uri: item.file.uri,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 267,
      columnNumber: 13
    }
  }), _react["default"].createElement(_reactNative.Text, {
    style: [styles.progressDurationText, {
      color: grey_dark
    }, progressDurationText],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 277,
      columnNumber: 11
    }
  }, progressDuration), _react["default"].createElement(_reactNative.View, {
    style: [styles.progressControlView, progressControlView],
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 280,
      columnNumber: 11
    }
  }, _react["default"].createElement(_ProgressControl.ProgressControl, {
    duration: item.duration,
    filledColor: accent_blue,
    onPlayPause: handlePlayPause,
    onProgressDrag: handleProgressDrag,
    progress: item.progress,
    testID: "progress-control",
    width: 120,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 281,
      columnNumber: 13
    }
  })))));
};
var AudioAttachment = function AudioAttachment(props) {
  return _react["default"].createElement(AudioAttachmentWithContext, (0, _extends2["default"])({}, props, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 310,
      columnNumber: 3
    }
  }));
};
exports.AudioAttachment = AudioAttachment;
AudioAttachment.displayName = 'AudioAttachment{messageInput{autoAttachment}}';
//# sourceMappingURL=AudioAttachment.js.map
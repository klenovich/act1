var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderText = exports.ListOutput = void 0;
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeMarkdownPackage = _interopRequireDefault(require("react-native-markdown-package"));
var _truncate = _interopRequireDefault(require("lodash/truncate"));
var _simpleMarkdown = require("simple-markdown");
var _parseLinks = require("./parseLinks");
var _this = this,
  _jsxFileName = "/home/runner/work/stream-chat-react-native/stream-chat-react-native/package/src/components/Message/MessageSimple/utils/renderText.tsx";
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var defaultMarkdownStyles = {
  inlineCode: {
    fontSize: 13,
    padding: 3,
    paddingHorizontal: 5
  },
  list: {
    marginBottom: 8,
    marginTop: 8
  },
  listItemNumber: {
    fontWeight: 'bold'
  },
  listItemText: {
    flex: 0
  },
  listRow: {
    flexDirection: 'row'
  },
  mentions: {
    fontWeight: '700'
  },
  paragraph: {
    marginBottom: 8,
    marginTop: 8
  },
  paragraphCenter: {
    marginBottom: 8,
    marginTop: 8
  },
  paragraphWithImage: {
    marginBottom: 8,
    marginTop: 8
  }
};
var parse = function parse(capture, _parse, state) {
  return {
    content: (0, _simpleMarkdown.parseInline)(_parse, capture[0], state)
  };
};
var renderText = function renderText(params) {
  var colors = params.colors,
    markdownRules = params.markdownRules,
    markdownStyles = params.markdownStyles,
    message = params.message,
    messageOverlay = params.messageOverlay,
    messageTextNumberOfLines = params.messageTextNumberOfLines,
    onLinkParams = params.onLink,
    onLongPressParam = params.onLongPress,
    onlyEmojis = params.onlyEmojis,
    onPressParam = params.onPress,
    preventPress = params.preventPress;
  var mentioned_users = message.mentioned_users,
    text = message.text;
  if (!text) return null;
  var newText = text.trim();
  var linkInfos = (0, _parseLinks.parseLinksFromText)(newText);
  for (var _iterator = _createForOfIteratorHelperLoose(linkInfos), _step; !(_step = _iterator()).done;) {
    var linkInfo = _step.value;
    var displayLink = (0, _truncate["default"])(linkInfo.raw, {
      length: 200,
      omission: '...'
    });
    var markdown = "[" + displayLink + "](" + linkInfo.encodedUrl + ")";
    newText = newText.replace(linkInfo.raw, markdown);
  }
  newText = newText.replace(/[<&"'>]/g, '\\$&');
  var styles = (0, _extends2["default"])({}, defaultMarkdownStyles, markdownStyles, {
    autolink: (0, _extends2["default"])({}, defaultMarkdownStyles.autolink, {
      color: colors.accent_blue
    }, markdownStyles == null ? void 0 : markdownStyles.autolink),
    inlineCode: (0, _extends2["default"])({}, defaultMarkdownStyles.inlineCode, {
      backgroundColor: colors.white_smoke,
      borderColor: colors.grey_gainsboro,
      color: colors.accent_red
    }, markdownStyles == null ? void 0 : markdownStyles.inlineCode),
    mentions: (0, _extends2["default"])({}, defaultMarkdownStyles.mentions, {
      color: colors.accent_blue
    }, markdownStyles == null ? void 0 : markdownStyles.mentions),
    text: (0, _extends2["default"])({}, defaultMarkdownStyles.text, {
      color: colors.black
    }, markdownStyles == null ? void 0 : markdownStyles.text)
  });
  var onLink = function onLink(url) {
    var pattern = new RegExp(/^\S+:\/\//);
    if (!pattern.test(url)) {
      url = 'http://' + url;
    }
    return onLinkParams ? onLinkParams(url) : _reactNative.Linking.canOpenURL(url).then(function (canOpenUrl) {
      return canOpenUrl && _reactNative.Linking.openURL(url);
    });
  };
  var link = function link(node, output, _ref) {
    var state = (0, _extends2["default"])({}, ((0, _objectDestructuringEmpty2["default"])(_ref), _ref));
    var url = node.target;
    var onPress = function onPress(event) {
      if (!preventPress && onPressParam) {
        onPressParam({
          additionalInfo: {
            url: url
          },
          defaultHandler: function defaultHandler() {
            onLink(url);
          },
          emitter: 'textLink',
          event: event
        });
      }
    };
    var onLongPress = function onLongPress(event) {
      if (!preventPress && onLongPressParam) {
        onLongPressParam({
          additionalInfo: {
            url: url
          },
          emitter: 'textLink',
          event: event
        });
      }
    };
    return _react["default"].createElement(_reactNative.Text, {
      key: state.key,
      onLongPress: onLongPress,
      onPress: onPress,
      style: styles.autolink,
      suppressHighlighting: true,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 189,
        columnNumber: 7
      }
    }, output(node.content, (0, _extends2["default"])({}, state, {
      withinLink: true
    })));
  };
  var paragraphText = function paragraphText(node, output, _ref2) {
    var state = (0, _extends2["default"])({}, ((0, _objectDestructuringEmpty2["default"])(_ref2), _ref2));
    if (messageTextNumberOfLines !== undefined) {
      if (state.key === '0' || state.key === 0) {
        return _react["default"].createElement(_reactNative.Text, {
          key: state.key,
          numberOfLines: messageTextNumberOfLines,
          style: styles.paragraph,
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 207,
            columnNumber: 11
          }
        }, output(node.content, state));
      } else {
        return null;
      }
    }
    return _react["default"].createElement(_reactNative.Text, {
      key: state.key,
      style: styles.paragraph,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 217,
        columnNumber: 7
      }
    }, output(node.content, state));
  };
  var mentionedUsers = Array.isArray(mentioned_users) ? mentioned_users.reduce(function (acc, cur) {
    var userName = cur.name || cur.id || '';
    if (userName) {
      acc += (acc.length ? '|' : '') + "@" + userName;
    }
    return acc.replaceAll(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }, '') : '';
  var regEx = new RegExp("^\\B(" + mentionedUsers + ")", 'g');
  var match = function match(source) {
    return regEx.exec(source);
  };
  var mentionsReact = function mentionsReact(node, output, _ref3) {
    var _node$content$, _node$content$$conten;
    var state = (0, _extends2["default"])({}, ((0, _objectDestructuringEmpty2["default"])(_ref3), _ref3));
    var userName = (_node$content$ = node.content[0]) == null ? void 0 : (_node$content$$conten = _node$content$.content) == null ? void 0 : _node$content$$conten.substring(1);
    var onPress = function onPress(event) {
      if (!preventPress && onPressParam) {
        onPressParam({
          additionalInfo: {
            user: mentioned_users == null ? void 0 : mentioned_users.find(function (user) {
              return userName === user.name;
            })
          },
          emitter: 'textMention',
          event: event
        });
      }
    };
    var onLongPress = function onLongPress(event) {
      if (!preventPress && onLongPressParam) {
        onLongPressParam({
          emitter: 'textMention',
          event: event
        });
      }
    };
    return _react["default"].createElement(_reactNative.Text, {
      key: state.key,
      onLongPress: onLongPress,
      onPress: onPress,
      style: styles.mentions,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 263,
        columnNumber: 7
      }
    }, Array.isArray(node.content) ? node.content.reduce(function (acc, current) {
      return acc + current.content;
    }, '') || '' : output(node.content, state));
  };
  var list = function list(node, output, state) {
    return _react["default"].createElement(ListOutput, {
      key: "list-" + state.key,
      node: node,
      output: output,
      state: state,
      styles: styles,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 272,
        columnNumber: 5
      }
    });
  };
  var customRules = (0, _extends2["default"])({
    image: {
      match: function match() {
        return null;
      }
    },
    link: {
      react: link
    },
    list: {
      react: list
    },
    paragraph: messageTextNumberOfLines ? {
      react: paragraphText
    } : {},
    reflink: {
      match: function match() {
        return null;
      }
    },
    sublist: {
      react: list
    }
  }, mentionedUsers ? {
    mentions: {
      match: match,
      order: _simpleMarkdown.defaultRules.text.order - 0.5,
      parse: parse,
      react: mentionsReact
    }
  } : {});
  return _react["default"].createElement(_reactNativeMarkdownPackage["default"], {
    key: JSON.stringify(mentioned_users) + "-" + onlyEmojis + "-" + (messageOverlay ? JSON.stringify(markdownStyles) : undefined) + "-" + JSON.stringify(colors),
    onLink: onLink,
    rules: (0, _extends2["default"])({}, customRules, markdownRules),
    styles: styles,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 304,
      columnNumber: 5
    }
  }, newText);
};
exports.renderText = renderText;
var ListOutput = function ListOutput(_ref4) {
  var node = _ref4.node,
    output = _ref4.output,
    state = _ref4.state,
    styles = _ref4.styles;
  var isSublist = state.withinList;
  var parentTypes = ['text', 'paragraph', 'strong'];
  return _react["default"].createElement(_reactNative.View, {
    key: state.key,
    style: isSublist ? styles == null ? void 0 : styles.sublist : styles == null ? void 0 : styles.list,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 339,
      columnNumber: 5
    }
  }, node.items.map(function (item, index) {
    var _item$;
    var indexAfterStart = node.start + index;
    if (item === null) {
      return _react["default"].createElement(ListRow, {
        key: index,
        style: styles == null ? void 0 : styles.listRow,
        testID: "list-item",
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 345,
          columnNumber: 13
        }
      }, _react["default"].createElement(Bullet, {
        index: node.ordered && indexAfterStart,
        style: node.ordered ? styles == null ? void 0 : styles.listItemNumber : styles == null ? void 0 : styles.listItemBullet,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 346,
          columnNumber: 15
        }
      }));
    }
    isSublist = item.length > 1 && item[1].type === 'list';
    var isSublistWithinText = parentTypes.includes(((_item$ = item[0]) != null ? _item$ : {}).type) && isSublist;
    var style = isSublistWithinText ? {
      marginBottom: 0
    } : {};
    return _react["default"].createElement(ListRow, {
      key: index,
      style: styles == null ? void 0 : styles.listRow,
      testID: "list-item",
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 359,
        columnNumber: 11
      }
    }, _react["default"].createElement(Bullet, {
      index: node.ordered && indexAfterStart,
      style: node.ordered ? styles == null ? void 0 : styles.listItemNumber : styles == null ? void 0 : styles.listItemBullet,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 360,
        columnNumber: 13
      }
    }), _react["default"].createElement(ListItem, {
      key: 1,
      style: [styles == null ? void 0 : styles.listItemText, style],
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 364,
        columnNumber: 13
      }
    }, output(item, state)));
  }));
};
exports.ListOutput = ListOutput;
var Bullet = function Bullet(_ref5) {
  var index = _ref5.index,
    style = _ref5.style;
  return _react["default"].createElement(_reactNative.Text, {
    key: 0,
    style: style,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 379,
      columnNumber: 3
    }
  }, index ? index + ". " : "\u2022 ");
};
var ListRow = function ListRow(_ref6) {
  var children = _ref6.children,
    style = _ref6.style;
  return _react["default"].createElement(_reactNative.Text, {
    style: style,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 385,
      columnNumber: 3
    }
  }, children);
};
var ListItem = function ListItem(_ref7) {
  var children = _ref7.children,
    style = _ref7.style;
  return _react["default"].createElement(_reactNative.Text, {
    style: style,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 389,
      columnNumber: 3
    }
  }, children);
};
//# sourceMappingURL=renderText.js.map
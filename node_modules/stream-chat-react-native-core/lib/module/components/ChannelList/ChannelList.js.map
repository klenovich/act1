{"version":3,"names":["_react","_interopRequireWildcard","require","_ChannelListFooterLoadingIndicator","_ChannelListHeaderErrorIndicator","_ChannelListHeaderNetworkDownIndicator","_ChannelListLoadingIndicator","_ChannelListMessenger","_useAddedToChannelNotification","_useChannelDeleted","_useChannelHidden","_useChannelTruncated","_useChannelUpdated","_useChannelVisible","_useNewMessage","_useNewMessageNotification","_useRemovedFromChannelNotification","_useUserPresence","_useCreateChannelsContext","_usePaginatedChannels2","_Skeleton","_ChannelsContext","_ChatContext","_upsertCidsForQuery","_ChannelPreviewMessenger","_EmptyStateIndicator","_LoadingErrorIndicator","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","ChannelList","props","_props$additionalFlat","additionalFlatListProps","channelRenderFilterFn","_props$EmptyStateIndi","EmptyStateIndicator","EmptyStateIndicatorDefault","_props$FooterLoadingI","FooterLoadingIndicator","ChannelListFooterLoadingIndicator","_props$filters","filters","_props$HeaderErrorInd","HeaderErrorIndicator","ChannelListHeaderErrorIndicator","_props$HeaderNetworkD","HeaderNetworkDownIndicator","ChannelListHeaderNetworkDownIndicator","_props$List","List","ChannelListMessenger","ListHeaderComponent","_props$LoadingErrorIn","LoadingErrorIndicator","LoadingErrorIndicatorDefault","_props$LoadingIndicat","LoadingIndicator","ChannelListLoadingIndicator","_props$loadMoreThresh","loadMoreThreshold","_props$lockChannelOrd","lockChannelOrder","_props$maxUnreadCount","maxUnreadCount","_props$numberOfSkelet","numberOfSkeletons","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelVisible","onChannelTruncated","onChannelUpdated","onMessageNew","onRemovedFromChannel","onSelect","onNewMessage","onNewMessageNotification","_props$options","options","_props$Preview","Preview","ChannelPreviewMessenger","PreviewAvatar","PreviewMessage","PreviewMutedStatus","PreviewStatus","PreviewTitle","PreviewUnreadCount","setFlatListRef","_props$Skeleton","Skeleton","SkeletonDefault","_props$sort","sort","_useState","useState","_useState2","_slicedToArray2","forceUpdate","setForceUpdate","_useChatContext","useChatContext","enableOfflineSupport","_usePaginatedChannels","usePaginatedChannels","channels","error","hasNextPage","loadingChannels","loadingNextPage","loadNextPage","refreshing","refreshList","reloadList","setChannels","staticChannelsActive","useAddedToChannelNotification","useChannelDeleted","useChannelHidden","useChannelTruncated","useChannelUpdated","useChannelVisible","useNewMessage","useNewMessageNotification","useRemovedFromChannelNotification","useUserPresence","channelIdsStr","reduce","acc","channel","cid","useEffect","upsertCidsForQuery","cids","map","c","channelsContext","useCreateChannelsContext","ref","createElement","ChannelsProvider","value","__self","__source","fileName","lineNumber","columnNumber","exports"],"sources":["ChannelList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport type { FlatList } from 'react-native-gesture-handler';\n\nimport type { Channel, ChannelFilters, ChannelOptions, ChannelSort, Event } from 'stream-chat';\n\nimport { ChannelListFooterLoadingIndicator } from './ChannelListFooterLoadingIndicator';\nimport { ChannelListHeaderErrorIndicator } from './ChannelListHeaderErrorIndicator';\nimport { ChannelListHeaderNetworkDownIndicator } from './ChannelListHeaderNetworkDownIndicator';\nimport { ChannelListLoadingIndicator } from './ChannelListLoadingIndicator';\nimport { ChannelListMessenger, ChannelListMessengerProps } from './ChannelListMessenger';\nimport { useAddedToChannelNotification } from './hooks/listeners/useAddedToChannelNotification';\nimport { useChannelDeleted } from './hooks/listeners/useChannelDeleted';\nimport { useChannelHidden } from './hooks/listeners/useChannelHidden';\nimport { useChannelTruncated } from './hooks/listeners/useChannelTruncated';\nimport { useChannelUpdated } from './hooks/listeners/useChannelUpdated';\nimport { useChannelVisible } from './hooks/listeners/useChannelVisible';\nimport { useNewMessage } from './hooks/listeners/useNewMessage';\nimport { useNewMessageNotification } from './hooks/listeners/useNewMessageNotification';\nimport { useRemovedFromChannelNotification } from './hooks/listeners/useRemovedFromChannelNotification';\nimport { useUserPresence } from './hooks/listeners/useUserPresence';\nimport { useCreateChannelsContext } from './hooks/useCreateChannelsContext';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { Skeleton as SkeletonDefault } from './Skeleton';\n\nimport {\n  ChannelsContextValue,\n  ChannelsProvider,\n} from '../../contexts/channelsContext/ChannelsContext';\nimport { useChatContext } from '../../contexts/chatContext/ChatContext';\nimport { upsertCidsForQuery } from '../../store/apis/upsertCidsForQuery';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { ChannelPreviewMessenger } from '../ChannelPreview/ChannelPreviewMessenger';\nimport { EmptyStateIndicator as EmptyStateIndicatorDefault } from '../Indicators/EmptyStateIndicator';\nimport { LoadingErrorIndicator as LoadingErrorIndicatorDefault } from '../Indicators/LoadingErrorIndicator';\n\nexport type ChannelListProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Partial<\n  Pick<\n    ChannelsContextValue<StreamChatGenerics>,\n    | 'additionalFlatListProps'\n    | 'EmptyStateIndicator'\n    | 'FooterLoadingIndicator'\n    | 'HeaderErrorIndicator'\n    | 'HeaderNetworkDownIndicator'\n    | 'LoadingErrorIndicator'\n    | 'LoadingIndicator'\n    | 'Preview'\n    | 'setFlatListRef'\n    | 'ListHeaderComponent'\n    | 'onSelect'\n    | 'PreviewAvatar'\n    | 'PreviewMessage'\n    | 'PreviewMutedStatus'\n    | 'PreviewStatus'\n    | 'PreviewTitle'\n    | 'PreviewUnreadCount'\n    | 'loadMoreThreshold'\n    | 'Skeleton'\n    | 'maxUnreadCount'\n    | 'numberOfSkeletons'\n  >\n> & {\n  /** Optional function to filter channels prior to rendering the list. Do not use any complex logic that would delay the loading of the ChannelList. We recommend using a pure function with array methods like filter/sort/reduce. */\n  channelRenderFilterFn?: (\n    channels: Array<Channel<StreamChatGenerics>>,\n  ) => Array<Channel<StreamChatGenerics>>;\n  /**\n   * Object containing channel query filters\n   *\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available filter fields\n   *\n   * @overrideType object\n   * */\n  filters?: ChannelFilters<StreamChatGenerics>;\n  /**\n   * Custom UI component to display the list of channels\n   *\n   * Default: [ChannelListMessenger](https://getstream.io/chat/docs/sdk/reactnative/ui-components/channel-list-messenger/)\n   */\n  List?: React.ComponentType<ChannelListMessengerProps<StreamChatGenerics>>;\n  /**\n   * If set to true, channels won't dynamically sort by most recent message, defaults to false\n   */\n  lockChannelOrder?: boolean;\n  /**\n   * Function that overrides default behavior when a user gets added to a channel\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event Object](https://getstream.io/chat/docs/event_object) corresponding to `notification.added_to_channel` event\n   *\n   * @overrideType Function\n   * */\n  onAddedToChannel?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets deleted. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.deleted` event\n   *\n   * @overrideType Function\n   * */\n  onChannelDeleted?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets hidden. In absence of this prop, the channel will be removed from the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.hidden` event\n   *\n   * @overrideType Function\n   * */\n  onChannelHidden?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function to customize behavior when a channel gets truncated\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.truncated` event\n   *\n   * @overrideType Function\n   * */\n  onChannelTruncated?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets updated\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.updated` event\n   *\n   * @overrideType Function\n   * */\n  onChannelUpdated?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a channel gets visible. In absence of this prop, the channel will be added to the list.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `channel.visible` event\n   *\n   * @overrideType Function\n   * */\n  onChannelVisible?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * @deprecated use onNewMessageNotification instead\n   *\n   * Override the default listener/handler for event `notification.message_new`\n   * This event is received on channel, which is not being watched.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.message_new` event\n   *\n   * @overrideType Function\n   * */\n  onMessageNew?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Override the default listener/handler for event `message.new`\n   * This event is received on channel, when a new message is added on a channel.\n   *\n   * @param lockChannelOrder If set to true, channels won't dynamically sort by most recent message, defaults to false\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `message.new` event\n   *\n   * @overrideType Function\n   * */\n  onNewMessage?: (\n    lockChannelOrder: boolean,\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Override the default listener/handler for event `notification.message_new`\n   * This event is received on channel, which is not being watched.\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.message_new` event\n   *\n   * @overrideType Function\n   * */\n  onNewMessageNotification?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Function that overrides default behavior when a user gets removed from a channel\n   *\n   * @param setChannels Setter for internal state property - `channels`. It's created from useState() hook.\n   * @param event An [Event object](https://getstream.io/chat/docs/event_object) corresponding to `notification.removed_from_channel` event\n   *\n   * @overrideType Function\n   * */\n  onRemovedFromChannel?: (\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n    event: Event<StreamChatGenerics>,\n  ) => void;\n  /**\n   * Object containing channel query options\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available option fields\n   * */\n  options?: ChannelOptions;\n  /**\n   * Object containing channel sort parameters\n   * @see See [Channel query documentation](https://getstream.io/chat/docs/query_channels) for a list of available sorting fields\n   * */\n  sort?: ChannelSort<StreamChatGenerics>;\n};\n\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\n\n/**\n * This component fetches a list of channels, allowing you to select the channel you want to open.\n * The ChannelList doesn't provide any UI for the underlying React Native FlatList. UI is determined by the `List` component which is\n * provided to the ChannelList component as a prop. By default, the ChannelListMessenger component is used as the list UI.\n *\n * @example ./ChannelList.md\n */\nexport const ChannelList = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: ChannelListProps<StreamChatGenerics>,\n) => {\n  const {\n    additionalFlatListProps = {},\n    channelRenderFilterFn,\n    EmptyStateIndicator = EmptyStateIndicatorDefault,\n    FooterLoadingIndicator = ChannelListFooterLoadingIndicator,\n    filters = DEFAULT_FILTERS,\n    HeaderErrorIndicator = ChannelListHeaderErrorIndicator,\n    HeaderNetworkDownIndicator = ChannelListHeaderNetworkDownIndicator,\n    List = ChannelListMessenger,\n    ListHeaderComponent,\n    LoadingErrorIndicator = LoadingErrorIndicatorDefault,\n    LoadingIndicator = ChannelListLoadingIndicator,\n    // https://stackoverflow.com/a/60666252/10826415\n    loadMoreThreshold = 0.1,\n    lockChannelOrder = false,\n    maxUnreadCount = 255,\n    numberOfSkeletons = 6,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelVisible,\n    onChannelTruncated,\n    onChannelUpdated,\n    onMessageNew,\n    onRemovedFromChannel,\n    onSelect,\n    onNewMessage,\n    onNewMessageNotification,\n    options = DEFAULT_OPTIONS,\n    Preview = ChannelPreviewMessenger,\n    PreviewAvatar,\n    PreviewMessage,\n    PreviewMutedStatus,\n    PreviewStatus,\n    PreviewTitle,\n    PreviewUnreadCount,\n    setFlatListRef,\n    Skeleton = SkeletonDefault,\n    sort = DEFAULT_SORT,\n  } = props;\n\n  const [forceUpdate, setForceUpdate] = useState(0);\n  const { enableOfflineSupport } = useChatContext<StreamChatGenerics>();\n  const {\n    channels,\n    error,\n    hasNextPage,\n    loadingChannels,\n    loadingNextPage,\n    loadNextPage,\n    refreshing,\n    refreshList,\n    reloadList,\n    setChannels,\n    staticChannelsActive,\n  } = usePaginatedChannels<StreamChatGenerics>({\n    enableOfflineSupport,\n    filters,\n    options,\n    setForceUpdate,\n    sort,\n  });\n\n  // Setup event listeners\n  useAddedToChannelNotification({\n    onAddedToChannel,\n    setChannels,\n  });\n\n  useChannelDeleted({\n    onChannelDeleted,\n    setChannels,\n  });\n\n  useChannelHidden({\n    onChannelHidden,\n    setChannels,\n  });\n\n  useChannelTruncated({\n    onChannelTruncated,\n    refreshList,\n    setChannels,\n    setForceUpdate,\n  });\n\n  useChannelUpdated({\n    onChannelUpdated,\n    setChannels,\n  });\n\n  useChannelVisible({\n    onChannelVisible,\n    setChannels,\n  });\n\n  useNewMessage({\n    lockChannelOrder,\n    onNewMessage,\n    setChannels,\n  });\n\n  useNewMessageNotification({\n    onMessageNew,\n    onNewMessageNotification,\n    setChannels,\n  });\n\n  useRemovedFromChannelNotification({\n    onRemovedFromChannel,\n    setChannels,\n  });\n\n  useUserPresence({\n    setChannels,\n  });\n\n  const channelIdsStr = channels?.reduce((acc, channel) => `${acc}${channel.cid}`, '');\n\n  useEffect(() => {\n    if (channels === null || staticChannelsActive || !enableOfflineSupport) {\n      return;\n    }\n\n    upsertCidsForQuery({\n      cids: channels.map((c) => c.cid),\n      filters,\n      sort,\n    });\n  }, [channelIdsStr, staticChannelsActive]);\n\n  const channelsContext = useCreateChannelsContext({\n    additionalFlatListProps,\n    channels: channelRenderFilterFn ? channelRenderFilterFn(channels ?? []) : channels,\n    EmptyStateIndicator,\n    error,\n    FooterLoadingIndicator,\n    forceUpdate,\n    hasNextPage,\n    HeaderErrorIndicator,\n    HeaderNetworkDownIndicator,\n    ListHeaderComponent,\n    loadingChannels,\n    LoadingErrorIndicator,\n    LoadingIndicator,\n    loadingNextPage,\n    loadMoreThreshold,\n    loadNextPage,\n    maxUnreadCount,\n    numberOfSkeletons,\n    onSelect,\n    Preview,\n    PreviewAvatar,\n    PreviewMessage,\n    PreviewMutedStatus,\n    PreviewStatus,\n    PreviewTitle,\n    PreviewUnreadCount,\n    refreshing,\n    refreshList,\n    reloadList,\n    setFlatListRef: (ref: FlatList<Channel<StreamChatGenerics>> | null) => {\n      if (setFlatListRef) {\n        setFlatListRef(ref);\n      }\n    },\n    Skeleton,\n  });\n\n  return (\n    <ChannelsProvider value={channelsContext}>\n      <List<StreamChatGenerics> />\n    </ChannelsProvider>\n  );\n};\n"],"mappings":"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"}
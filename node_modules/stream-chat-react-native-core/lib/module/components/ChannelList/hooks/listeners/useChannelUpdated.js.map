{"version":3,"names":["_react","require","_ChatContext","useChannelUpdated","_ref","onChannelUpdated","setChannels","_useChatContext","useChatContext","client","useEffect","handleEvent","event","channels","index","findIndex","channel","_event$channel","cid","_event$channel$hidden","_event$channel2","_channels$index$data","_event$channel$own_ca","_event$channel3","_channels$index$data2","data","_extends2","hidden","own_capabilities","_toConsumableArray2","listener","on","unsubscribe","exports"],"sources":["useChannelUpdated.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>;\n    onChannelUpdated?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useChannelUpdated = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onChannelUpdated,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = (event: Event<StreamChatGenerics>) => {\n      if (typeof onChannelUpdated === 'function') {\n        onChannelUpdated(setChannels, event);\n      } else {\n        setChannels((channels) => {\n          if (!channels) return channels;\n\n          const index = channels.findIndex(\n            (channel) => channel.cid === (event.cid || event.channel?.cid),\n          );\n          if (index >= 0 && event.channel) {\n            channels[index].data = {\n              ...event.channel,\n              hidden: event.channel?.hidden ?? channels[index].data?.hidden,\n              own_capabilities:\n                event.channel?.own_capabilities ?? channels[index].data?.own_capabilities,\n            };\n          }\n\n          return [...channels];\n        });\n      }\n    };\n\n    const listener = client?.on('channel.updated', handleEvent);\n    return () => listener?.unsubscribe();\n  }, []);\n};\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIA,IAAAC,YAAA,GAAAD,OAAA;AAaO,IAAME,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAAC,IAAA,EAKQ;EAAA,IAFpCC,gBAAgB,GAAAD,IAAA,CAAhBC,gBAAgB;IAChBC,WAAW,GAAAF,IAAA,CAAXE,WAAW;EAEX,IAAAC,eAAA,GAAmB,IAAAC,2BAAc,EAAqB,CAAC;IAA/CC,MAAM,GAAAF,eAAA,CAANE,MAAM;EAEd,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAgC,EAAK;MACxD,IAAI,OAAOP,gBAAgB,KAAK,UAAU,EAAE;QAC1CA,gBAAgB,CAACC,WAAW,EAAEM,KAAK,CAAC;MACtC,CAAC,MAAM;QACLN,WAAW,CAAC,UAACO,QAAQ,EAAK;UACxB,IAAI,CAACA,QAAQ,EAAE,OAAOA,QAAQ;UAE9B,IAAMC,KAAK,GAAGD,QAAQ,CAACE,SAAS,CAC9B,UAACC,OAAO;YAAA,IAAAC,cAAA;YAAA,OAAKD,OAAO,CAACE,GAAG,MAAMN,KAAK,CAACM,GAAG,MAAAD,cAAA,GAAIL,KAAK,CAACI,OAAO,qBAAbC,cAAA,CAAeC,GAAG,EAAC;UAAA,CAChE,CAAC;UACD,IAAIJ,KAAK,IAAI,CAAC,IAAIF,KAAK,CAACI,OAAO,EAAE;YAAA,IAAAG,qBAAA,EAAAC,eAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA;YAC/BX,QAAQ,CAACC,KAAK,CAAC,CAACW,IAAI,OAAAC,SAAA,iBACfd,KAAK,CAACI,OAAO;cAChBW,MAAM,GAAAR,qBAAA,IAAAC,eAAA,GAAER,KAAK,CAACI,OAAO,qBAAbI,eAAA,CAAeO,MAAM,YAAAR,qBAAA,IAAAE,oBAAA,GAAIR,QAAQ,CAACC,KAAK,CAAC,CAACW,IAAI,qBAApBJ,oBAAA,CAAsBM,MAAM;cAC7DC,gBAAgB,GAAAN,qBAAA,IAAAC,eAAA,GACdX,KAAK,CAACI,OAAO,qBAAbO,eAAA,CAAeK,gBAAgB,YAAAN,qBAAA,IAAAE,qBAAA,GAAIX,QAAQ,CAACC,KAAK,CAAC,CAACW,IAAI,qBAApBD,qBAAA,CAAsBI;YAAgB,EAC5E;UACH;UAEA,WAAAC,mBAAA,aAAWhB,QAAQ;QACrB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,IAAMiB,QAAQ,GAAGrB,MAAM,oBAANA,MAAM,CAAEsB,EAAE,CAAC,iBAAiB,EAAEpB,WAAW,CAAC;IAC3D,OAAO;MAAA,OAAMmB,QAAQ,oBAARA,QAAQ,CAAEE,WAAW,CAAC,CAAC;IAAA;EACtC,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;AAACC,OAAA,CAAA9B,iBAAA,GAAAA,iBAAA"}
{"version":3,"names":["_react","require","_uniqBy","_interopRequireDefault","_ChatContext","_utils","useAddedToChannelNotification","_ref","onAddedToChannel","setChannels","_useChatContext","useChatContext","client","useEffect","handleEvent","_ref2","_asyncToGenerator2","_regenerator","mark","_callee","event","_event$channel","_event$channel2","channel","wrap","_callee$","_context","prev","next","id","type","getChannel","sent","channels","uniqBy","concat","_toConsumableArray2","stop","_x","apply","arguments","listener","on","unsubscribe","exports"],"sources":["useAddedToChannelNotification.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport uniqBy from 'lodash/uniqBy';\n\nimport type { Channel, Event } from 'stream-chat';\n\nimport { useChatContext } from '../../../../contexts/chatContext/ChatContext';\n\nimport type { DefaultStreamChatGenerics } from '../../../../types/types';\nimport { getChannel } from '../../utils';\n\ntype Parameters<StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics> =\n  {\n    setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>;\n    onAddedToChannel?: (\n      setChannels: React.Dispatch<React.SetStateAction<Channel<StreamChatGenerics>[] | null>>,\n      event: Event<StreamChatGenerics>,\n    ) => void;\n  };\n\nexport const useAddedToChannelNotification = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>({\n  onAddedToChannel,\n  setChannels,\n}: Parameters<StreamChatGenerics>) => {\n  const { client } = useChatContext<StreamChatGenerics>();\n\n  useEffect(() => {\n    const handleEvent = async (event: Event<StreamChatGenerics>) => {\n      if (typeof onAddedToChannel === 'function') {\n        onAddedToChannel(setChannels, event);\n      } else {\n        if (event.channel?.id && event.channel?.type) {\n          const channel = await getChannel<StreamChatGenerics>({\n            client,\n            id: event.channel.id,\n            type: event.channel.type,\n          });\n          setChannels((channels) => (channels ? uniqBy([channel, ...channels], 'cid') : channels));\n        }\n      }\n    };\n\n    const listener = client?.on('notification.added_to_channel', handleEvent);\n    return () => listener?.unsubscribe();\n  }, []);\n};\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAC,sBAAA,CAAAF,OAAA;AAIA,IAAAG,YAAA,GAAAH,OAAA;AAGA,IAAAI,MAAA,GAAAJ,OAAA;AAWO,IAAMK,6BAA6B,GAAG,SAAhCA,6BAA6BA,CAAAC,IAAA,EAKJ;EAAA,IAFpCC,gBAAgB,GAAAD,IAAA,CAAhBC,gBAAgB;IAChBC,WAAW,GAAAF,IAAA,CAAXE,WAAW;EAEX,IAAAC,eAAA,GAAmB,IAAAC,2BAAc,EAAqB,CAAC;IAA/CC,MAAM,GAAAF,eAAA,CAANE,MAAM;EAEd,IAAAC,gBAAS,EAAC,YAAM;IACd,IAAMC,WAAW;MAAA,IAAAC,KAAA,OAAAC,kBAAA,aAAAC,YAAA,YAAAC,IAAA,CAAG,SAAAC,QAAOC,KAAgC;QAAA,IAAAC,cAAA,EAAAC,eAAA,EAAAC,OAAA;QAAA,OAAAN,YAAA,YAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,MACrD,OAAOpB,gBAAgB,KAAK,UAAU;gBAAAkB,QAAA,CAAAE,IAAA;gBAAA;cAAA;cACxCpB,gBAAgB,CAACC,WAAW,EAAEW,KAAK,CAAC;cAACM,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAA,MAEjC,CAAAP,cAAA,GAAAD,KAAK,CAACG,OAAO,aAAbF,cAAA,CAAeQ,EAAE,KAAAP,eAAA,GAAIF,KAAK,CAACG,OAAO,aAAbD,eAAA,CAAeQ,IAAI;gBAAAJ,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACpB,IAAAG,iBAAU,EAAqB;gBACnDnB,MAAM,EAANA,MAAM;gBACNiB,EAAE,EAAET,KAAK,CAACG,OAAO,CAACM,EAAE;gBACpBC,IAAI,EAAEV,KAAK,CAACG,OAAO,CAACO;cACtB,CAAC,CAAC;YAAA;cAJIP,OAAO,GAAAG,QAAA,CAAAM,IAAA;cAKbvB,WAAW,CAAC,UAACwB,QAAQ;gBAAA,OAAMA,QAAQ,GAAG,IAAAC,kBAAM,GAAEX,OAAO,EAAAY,MAAA,KAAAC,mBAAA,aAAKH,QAAQ,IAAG,KAAK,CAAC,GAAGA,QAAQ;cAAA,CAAC,CAAC;YAAC;YAAA;cAAA,OAAAP,QAAA,CAAAW,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CAG9F;MAAA,gBAbKL,WAAWA,CAAAwB,EAAA;QAAA,OAAAvB,KAAA,CAAAwB,KAAA,OAAAC,SAAA;MAAA;IAAA,GAahB;IAED,IAAMC,QAAQ,GAAG7B,MAAM,oBAANA,MAAM,CAAE8B,EAAE,CAAC,+BAA+B,EAAE5B,WAAW,CAAC;IACzE,OAAO;MAAA,OAAM2B,QAAQ,oBAARA,QAAQ,CAAEE,WAAW,CAAC,CAAC;IAAA;EACtC,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;AAACC,OAAA,CAAAtC,6BAAA,GAAAA,6BAAA"}
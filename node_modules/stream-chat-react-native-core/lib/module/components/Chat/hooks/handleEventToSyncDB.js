Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleEventToSyncDB = void 0;
var _deleteChannel = require("../../../store/apis/deleteChannel");
var _deleteMember = require("../../../store/apis/deleteMember");
var _deleteMessagesForChannel = require("../../../store/apis/deleteMessagesForChannel");
var _updateMessage = require("../../../store/apis/updateMessage");
var _upsertChannelData = require("../../../store/apis/upsertChannelData");
var _upsertChannels = require("../../../store/apis/upsertChannels");
var _upsertMembers = require("../../../store/apis/upsertMembers");
var _upsertMessages = require("../../../store/apis/upsertMessages");
var _upsertReads = require("../../../store/apis/upsertReads");
var handleEventToSyncDB = function handleEventToSyncDB(event, flush) {
  var type = event.type;
  if (type === 'message.read') {
    var _event$user;
    if ((_event$user = event.user) != null && _event$user.id && event.cid) {
      return (0, _upsertReads.upsertReads)({
        cid: event.cid,
        flush: flush,
        reads: [{
          last_read: event.received_at,
          unread_messages: 0,
          user: event.user
        }]
      });
    }
  }
  if (type === 'message.new') {
    if (event.message && (!event.message.parent_id || event.message.show_in_channel)) {
      return (0, _upsertMessages.upsertMessages)({
        flush: flush,
        messages: [event.message]
      });
    }
  }
  if (type === 'message.updated' || type === 'message.deleted') {
    if (event.message && !event.message.parent_id) {
      return (0, _updateMessage.updateMessage)({
        flush: flush,
        message: event.message
      });
    }
  }
  if (type === 'reaction.updated') {
    if (event.message && event.reaction) {
      return (0, _updateMessage.updateMessage)({
        flush: flush,
        message: event.message
      });
    }
  }
  if (type === 'reaction.new' || type === 'reaction.deleted') {
    if (event.message && !event.message.parent_id) {
      return (0, _updateMessage.updateMessage)({
        flush: flush,
        message: event.message
      });
    }
  }
  if (type === 'channel.updated' || type === 'channel.visible' || type === 'notification.added_to_channel' || type === 'notification.message_new') {
    if (event.channel) {
      return (0, _upsertChannelData.upsertChannelData)({
        channel: event.channel,
        flush: flush
      });
    }
  }
  if (type === 'channel.hidden' || type === 'channel.deleted' || type === 'notification.removed_from_channel') {
    if (event.channel) {
      return (0, _deleteChannel.deleteChannel)({
        cid: event.channel.cid,
        flush: flush
      });
    }
  }
  if (type === 'channel.truncated') {
    if (event.channel) {
      return (0, _deleteMessagesForChannel.deleteMessagesForChannel)({
        cid: event.channel.cid,
        flush: flush
      });
    }
  }
  if (type === 'channels.queried') {
    var _event$queriedChannel, _event$queriedChannel2;
    if ((_event$queriedChannel = event.queriedChannels) != null && (_event$queriedChannel2 = _event$queriedChannel.channels) != null && _event$queriedChannel2.length) {
      var _event$queriedChannel3, _event$queriedChannel4;
      return (0, _upsertChannels.upsertChannels)({
        channels: (_event$queriedChannel3 = event.queriedChannels) == null ? void 0 : _event$queriedChannel3.channels,
        flush: flush,
        isLatestMessagesSet: (_event$queriedChannel4 = event.queriedChannels) == null ? void 0 : _event$queriedChannel4.isLatestMessageSet
      });
    }
  }
  if (type === 'member.added' || type === 'member.updated') {
    if (event.member && event.cid) {
      return (0, _upsertMembers.upsertMembers)({
        cid: event.cid,
        flush: flush,
        members: [event.member]
      });
    }
  }
  if (type === 'member.removed') {
    if (event.member && event.cid) {
      return (0, _deleteMember.deleteMember)({
        cid: event.cid,
        flush: flush,
        member: event.member
      });
    }
  }
  return [];
};
exports.handleEventToSyncDB = handleEventToSyncDB;
//# sourceMappingURL=handleEventToSyncDB.js.map
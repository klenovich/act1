{"version":3,"names":["_deleteChannel","require","_deleteMember","_deleteMessagesForChannel","_updateMessage","_upsertChannelData","_upsertChannels","_upsertMembers","_upsertMessages","_upsertReads","handleEventToSyncDB","event","flush","type","_event$user","user","id","cid","upsertReads","reads","last_read","received_at","unread_messages","message","parent_id","show_in_channel","upsertMessages","messages","updateMessage","reaction","channel","upsertChannelData","deleteChannel","deleteMessagesForChannel","_event$queriedChannel","_event$queriedChannel2","queriedChannels","channels","length","_event$queriedChannel3","_event$queriedChannel4","upsertChannels","isLatestMessagesSet","isLatestMessageSet","member","upsertMembers","members","deleteMember","exports"],"sources":["handleEventToSyncDB.ts"],"sourcesContent":["import type { Event } from 'stream-chat';\n\nimport { deleteChannel } from '../../../store/apis/deleteChannel';\nimport { deleteMember } from '../../../store/apis/deleteMember';\nimport { deleteMessagesForChannel } from '../../../store/apis/deleteMessagesForChannel';\nimport { updateMessage } from '../../../store/apis/updateMessage';\nimport { upsertChannelData } from '../../../store/apis/upsertChannelData';\nimport { upsertChannels } from '../../../store/apis/upsertChannels';\nimport { upsertMembers } from '../../../store/apis/upsertMembers';\nimport { upsertMessages } from '../../../store/apis/upsertMessages';\nimport { upsertReads } from '../../../store/apis/upsertReads';\n\nexport const handleEventToSyncDB = (event: Event, flush?: boolean) => {\n  const { type } = event;\n\n  if (type === 'message.read') {\n    if (event.user?.id && event.cid) {\n      return upsertReads({\n        cid: event.cid,\n        flush,\n        reads: [\n          {\n            last_read: event.received_at as string,\n            unread_messages: 0,\n            user: event.user,\n          },\n        ],\n      });\n    }\n  }\n\n  if (type === 'message.new') {\n    if (event.message && (!event.message.parent_id || event.message.show_in_channel)) {\n      return upsertMessages({\n        flush,\n        messages: [event.message],\n      });\n    }\n  }\n\n  if (type === 'message.updated' || type === 'message.deleted') {\n    if (event.message && !event.message.parent_id) {\n      // Update only if it exists, otherwise event could be related\n      // to a message which is not in database.\n      return updateMessage({\n        flush,\n        message: event.message,\n      });\n    }\n  }\n\n  if (type === 'reaction.updated') {\n    if (event.message && event.reaction) {\n      // We update the entire message to make sure we also update\n      // reaction_counts.\n      return updateMessage({\n        flush,\n        message: event.message,\n      });\n    }\n  }\n\n  if (type === 'reaction.new' || type === 'reaction.deleted') {\n    if (event.message && !event.message.parent_id) {\n      // Here we are relying on the fact message.latest_reactions always includes\n      // the new reaction. So we first delete all the existing reactions and populate\n      // the reactions table with message.latest_reactions\n      return updateMessage({\n        flush,\n        message: event.message,\n      });\n    }\n  }\n\n  if (\n    type === 'channel.updated' ||\n    type === 'channel.visible' ||\n    type === 'notification.added_to_channel' ||\n    type === 'notification.message_new'\n  ) {\n    if (event.channel) {\n      return upsertChannelData({\n        channel: event.channel,\n        flush,\n      });\n    }\n  }\n\n  if (\n    type === 'channel.hidden' ||\n    type === 'channel.deleted' ||\n    type === 'notification.removed_from_channel'\n  ) {\n    if (event.channel) {\n      return deleteChannel({\n        cid: event.channel.cid,\n        flush,\n      });\n    }\n  }\n\n  if (type === 'channel.truncated') {\n    if (event.channel) {\n      return deleteMessagesForChannel({\n        cid: event.channel.cid,\n        flush,\n      });\n    }\n  }\n\n  if (type === 'channels.queried') {\n    if (event.queriedChannels?.channels?.length) {\n      return upsertChannels({\n        channels: event.queriedChannels?.channels,\n        flush,\n        isLatestMessagesSet: event.queriedChannels?.isLatestMessageSet,\n      });\n    }\n  }\n\n  if (type === 'member.added' || type === 'member.updated') {\n    if (event.member && event.cid) {\n      return upsertMembers({\n        cid: event.cid,\n        flush,\n        members: [event.member],\n      });\n    }\n  }\n\n  if (type === 'member.removed') {\n    if (event.member && event.cid) {\n      return deleteMember({\n        cid: event.cid,\n        flush,\n        member: event.member,\n      });\n    }\n  }\n\n  return [];\n};\n"],"mappings":"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"}
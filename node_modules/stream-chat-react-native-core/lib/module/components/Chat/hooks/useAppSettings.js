var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAppSettings = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var dbApi = _interopRequireWildcard(require("../../../store/apis"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var useAppSettings = function useAppSettings(client, isOnline, enableOfflineSupport, initialisedDatabase) {
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    appSettings = _useState2[0],
    setAppSettings = _useState2[1];
  var isMounted = (0, _react.useRef)(true);
  (0, _react.useEffect)(function () {
    function enforeAppSettings() {
      return _enforeAppSettings.apply(this, arguments);
    }
    function _enforeAppSettings() {
      _enforeAppSettings = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee() {
        var _appSettings, _appSettings2;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (client.userID) {
                _context.next = 2;
                break;
              }
              return _context.abrupt("return");
            case 2:
              if (!(!isOnline && enableOfflineSupport && initialisedDatabase)) {
                _context.next = 6;
                break;
              }
              _appSettings = dbApi.getAppSettings({
                currentUserId: client.userID
              });
              setAppSettings(_appSettings);
              return _context.abrupt("return");
            case 6:
              _context.prev = 6;
              _context.next = 9;
              return client.getAppSettings();
            case 9:
              _appSettings2 = _context.sent;
              if (isMounted.current) {
                setAppSettings(_appSettings2);
                enableOfflineSupport && dbApi.upsertAppSettings({
                  appSettings: _appSettings2,
                  currentUserId: client.userID
                });
              }
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](6);
              if (_context.t0 instanceof Error) {
                console.error("An error occurred while getting app settings: " + _context.t0);
              }
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[6, 13]]);
      }));
      return _enforeAppSettings.apply(this, arguments);
    }
    enforeAppSettings();
    return function () {
      isMounted.current = false;
    };
  }, [client, isOnline, initialisedDatabase]);
  return appSettings;
};
exports.useAppSettings = useAppSettings;
//# sourceMappingURL=useAppSettings.js.map
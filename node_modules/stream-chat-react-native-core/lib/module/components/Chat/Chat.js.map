{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_useAppSettings","_useCreateChatContext","_useIsOnline2","_useMutedUsers","_useSyncDatabase","_ChannelsStateContext","_ChatContext","_DebugContext","_OverlayContext","_ThemeContext","_TranslationContext","_useStreami18n","_init","_interopRequireDefault","_native","_QuickSqliteClient","_DBSyncManager","_version","_this","_jsxFileName","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","init","ChatWithContext","props","_client$user2","_client$user3","children","client","_props$closeConnectio","closeConnectionOnBackground","_props$enableOfflineS","enableOfflineSupport","i18nInstance","_props$ImageComponent","ImageComponent","Image","style","_useState","useState","_useState2","_slicedToArray2","channel","setChannel","translators","useStreami18n","_useIsOnline","useIsOnline","connectionRecovering","isOnline","_useState3","_useState4","initialisedDatabase","setInitialisedDatabase","mutedUsers","useMutedUsers","debugRef","useDebugContext","isDebugModeEnabled","__DEV__","current","useEffect","setUserAgent","SDK","Platform","OS","version","recoverStateOnReconnect","persistUserOnConnectionFailure","setEventType","setSendEventParams","action","data","user","setActiveChannel","newChannel","_client$user","id","QuickSqliteClient","initializeDatabase","DBSyncManager","appSettings","useAppSettings","chatContext","useCreateChatContext","useSyncDatabase","createElement","ChatProvider","value","__self","__source","fileName","lineNumber","columnNumber","TranslationProvider","_extends2","userLanguage","language","DEFAULT_USER_LANGUAGE","ThemeProvider","ChannelsStateProvider","Chat","_useOverlayContext","useOverlayContext","exports"],"sources":["Chat.tsx"],"sourcesContent":["import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport { Image, Platform } from 'react-native';\n\nimport type { Channel, StreamChat } from 'stream-chat';\n\nimport { useAppSettings } from './hooks/useAppSettings';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useIsOnline } from './hooks/useIsOnline';\nimport { useMutedUsers } from './hooks/useMutedUsers';\n\nimport { useSyncDatabase } from './hooks/useSyncDatabase';\n\nimport { ChannelsStateProvider } from '../../contexts/channelsStateContext/ChannelsStateContext';\nimport { ChatContextValue, ChatProvider } from '../../contexts/chatContext/ChatContext';\nimport { useDebugContext } from '../../contexts/debugContext/DebugContext';\nimport { useOverlayContext } from '../../contexts/overlayContext/OverlayContext';\nimport { DeepPartial, ThemeProvider } from '../../contexts/themeContext/ThemeContext';\nimport type { Theme } from '../../contexts/themeContext/utils/theme';\nimport {\n  DEFAULT_USER_LANGUAGE,\n  TranslationProvider,\n} from '../../contexts/translationContext/TranslationContext';\nimport { useStreami18n } from '../../hooks/useStreami18n';\nimport init from '../../init';\n\nimport { SDK } from '../../native';\nimport { QuickSqliteClient } from '../../store/QuickSqliteClient';\nimport type { DefaultStreamChatGenerics } from '../../types/types';\nimport { DBSyncManager } from '../../utils/DBSyncManager';\nimport type { Streami18n } from '../../utils/Streami18n';\nimport { version } from '../../version.json';\n\ninit();\n\nexport type ChatProps<\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n> = Pick<ChatContextValue<StreamChatGenerics>, 'client'> &\n  Partial<Pick<ChatContextValue<StreamChatGenerics>, 'ImageComponent'>> & {\n    /**\n     * When false, ws connection won't be disconnection upon backgrounding the app.\n     * To receive push notifications, its necessary that user doesn't have active\n     * websocket connection. So by default, we disconnect websocket connection when\n     * app goes to background, and reconnect when app comes to foreground.\n     */\n    closeConnectionOnBackground?: boolean;\n    /**\n     * Enables offline storage and loading for chat data.\n     */\n    enableOfflineSupport?: boolean;\n    /**\n     * Instance of Streami18n class should be provided to Chat component to enable internationalization.\n     *\n     * Stream provides following list of in-built translations:\n     * 1. English (en)\n     * 2. Dutch (nl)\n     * 3. ...\n     * 4. ...\n     *\n     * Simplest way to start using chat components in one of the in-built languages would be following:\n     *\n     * ```\n     * const i18n = new Streami18n('nl');\n     * <Chat client={chatClient} i18nInstance={i18n}>\n     *  ...\n     * </Chat>\n     * ```\n     *\n     * If you would like to override certain keys in in-built translation.\n     * UI will be automatically updated in this case.\n     *\n     * ```\n     * const i18n = new Streami18n('nl');\n     *\n     * i18n.registerTranslation('nl', {\n     *  'Nothing yet...': 'Nog Niet ...',\n     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n     * });\n     *\n     * <Chat client={chatClient} i18nInstance={i18n}>\n     *  ...\n     * </Chat>\n     * ```\n     *\n     * You can use the same function to add whole new language.\n     *\n     * ```\n     * const i18n = new Streami18n('it');\n     *\n     * i18n.registerTranslation('it', {\n     *  'Nothing yet...': 'Non ancora ...',\n     *  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} a {{ secondUser }} stanno scrivendo...',\n     * });\n     *\n     * // Make sure to call setLanguage to reflect new language in UI.\n     * i18n.setLanguage('it');\n     * <Chat client={chatClient} i18nInstance={i18n}>\n     *  ...\n     * </Chat>\n     * ```\n     */\n    i18nInstance?: Streami18n;\n    /**\n     * You can pass the theme object to customize the styles of Chat components. You can check the default theme in [theme.ts](https://github.com/GetStream/stream-chat-react-native/blob/main/package/src/contexts/themeContext/utils/theme.ts)\n     *\n     * Please check section about [themes in cookbook](https://github.com/GetStream/stream-chat-react-native/wiki/Cookbook-v3.0#theme) for details.\n     *\n     * ```\n     * import type { DeepPartial, Theme } from 'stream-chat-react-native';\n     *\n     * const theme: DeepPartial<Theme> = {\n     *   messageSimple: {\n     *     file: {\n     *       container: {\n     *         backgroundColor: 'red',\n     *       },\n     *       icon: {\n     *         height: 16,\n     *         width: 16,\n     *       },\n     *     },\n     *   },\n     * };\n     *\n     * <Chat style={theme}>\n     * </Chat>\n     * ```\n     *\n     * @overrideType object\n     */\n    style?: DeepPartial<Theme>;\n  };\n\nconst ChatWithContext = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChatProps<StreamChatGenerics>>,\n) => {\n  const {\n    children,\n    client,\n    closeConnectionOnBackground = true,\n    enableOfflineSupport = false,\n    i18nInstance,\n    ImageComponent = Image,\n    style,\n  } = props;\n\n  const [channel, setChannel] = useState<Channel<StreamChatGenerics>>();\n\n  // Setup translators\n  const translators = useStreami18n(i18nInstance);\n\n  /**\n   * Setup connection event listeners\n   */\n  const { connectionRecovering, isOnline } = useIsOnline<StreamChatGenerics>(\n    client,\n    closeConnectionOnBackground,\n  );\n\n  const [initialisedDatabase, setInitialisedDatabase] = useState(false);\n\n  /**\n   * Setup muted user listener\n   * TODO: reimplement\n   */\n  const mutedUsers = useMutedUsers<StreamChatGenerics>(client);\n\n  const debugRef = useDebugContext();\n  const isDebugModeEnabled = __DEV__ && debugRef && debugRef.current;\n\n  useEffect(() => {\n    if (client) {\n      client.setUserAgent(`${SDK}-${Platform.OS}-${version}`);\n      // This is to disable recovery related logic in js client, since we handle it in this SDK\n      client.recoverStateOnReconnect = false;\n      client.persistUserOnConnectionFailure = enableOfflineSupport;\n    }\n\n    if (isDebugModeEnabled) {\n      if (debugRef.current.setEventType) debugRef.current.setEventType('send');\n      if (debugRef.current.setSendEventParams)\n        debugRef.current.setSendEventParams({\n          action: 'Client',\n          data: client.user,\n        });\n    }\n  }, [client, enableOfflineSupport]);\n\n  const setActiveChannel = (newChannel?: Channel<StreamChatGenerics>) => setChannel(newChannel);\n\n  useEffect(() => {\n    if (client.user?.id && enableOfflineSupport) {\n      setInitialisedDatabase(false);\n      QuickSqliteClient.initializeDatabase();\n      DBSyncManager.init(client as unknown as StreamChat);\n      setInitialisedDatabase(true);\n    }\n  }, [client?.user?.id, enableOfflineSupport]);\n\n  const appSettings = useAppSettings(client, isOnline, enableOfflineSupport, initialisedDatabase);\n\n  const chatContext = useCreateChatContext({\n    appSettings,\n    channel,\n    client,\n    connectionRecovering,\n    enableOfflineSupport,\n    ImageComponent,\n    isOnline,\n    mutedUsers,\n    setActiveChannel,\n  });\n\n  useSyncDatabase({\n    client,\n    enableOfflineSupport,\n  });\n\n  return (\n    <ChatProvider<StreamChatGenerics> value={chatContext}>\n      <TranslationProvider\n        value={{ ...translators, userLanguage: client.user?.language || DEFAULT_USER_LANGUAGE }}\n      >\n        <ThemeProvider style={style}>\n          <ChannelsStateProvider<StreamChatGenerics>>{children}</ChannelsStateProvider>\n        </ThemeProvider>\n      </TranslationProvider>\n    </ChatProvider>\n  );\n};\n\n/**\n * Chat - Wrapper component for Chat. The needs to be placed around any other chat components.\n * This Chat component provides the ChatContext to all other components.\n *\n * The ChatContext provides the following props:\n *\n * - channel - currently active channel\n * - client - client connection\n * - connectionRecovering - whether or not websocket is reconnecting\n * - isOnline - whether or not set user is active\n * - setActiveChannel - function to set the currently active channel\n *\n * The Chat Component takes the following generics in order:\n * - At (AttachmentType) - custom Attachment object extension\n * - Ct (ChannelType) - custom Channel object extension\n * - Co (CommandType) - custom Command string union extension\n * - Ev (EventType) - custom Event object extension\n * - Me (MessageType) - custom Message object extension\n * - Re (ReactionType) - custom Reaction object extension\n * - Us (UserType) - custom User object extension\n */\nexport const Chat = <\n  StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics,\n>(\n  props: PropsWithChildren<ChatProps<StreamChatGenerics>>,\n) => {\n  const { style } = useOverlayContext();\n\n  return <ChatWithContext {...{ style }} {...props} />;\n};\n"],"mappings":"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"}